// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: actant_test.proto

package server

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SomeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsCloud  []*PointsCloud `protobuf:"bytes,1,rep,name=pointsCloud,proto3" json:"pointsCloud,omitempty"`
	MotionFrames []*MotionFrame `protobuf:"bytes,2,rep,name=motionFrames,proto3" json:"motionFrames,omitempty"`
}

func (x *SomeData) Reset() {
	*x = SomeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actant_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SomeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SomeData) ProtoMessage() {}

func (x *SomeData) ProtoReflect() protoreflect.Message {
	mi := &file_actant_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SomeData.ProtoReflect.Descriptor instead.
func (*SomeData) Descriptor() ([]byte, []int) {
	return file_actant_test_proto_rawDescGZIP(), []int{0}
}

func (x *SomeData) GetPointsCloud() []*PointsCloud {
	if x != nil {
		return x.PointsCloud
	}
	return nil
}

func (x *SomeData) GetMotionFrames() []*MotionFrame {
	if x != nil {
		return x.MotionFrames
	}
	return nil
}

var File_actant_test_proto protoreflect.FileDescriptor

var file_actant_test_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0b, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x53, 0x6f,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x0c, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x32, 0xc0,
	0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x48, 0x74, 0x74, 0x70, 0x12, 0x10, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_actant_test_proto_rawDescOnce sync.Once
	file_actant_test_proto_rawDescData = file_actant_test_proto_rawDesc
)

func file_actant_test_proto_rawDescGZIP() []byte {
	file_actant_test_proto_rawDescOnce.Do(func() {
		file_actant_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_actant_test_proto_rawDescData)
	})
	return file_actant_test_proto_rawDescData
}

var file_actant_test_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_actant_test_proto_goTypes = []interface{}{
	(*SomeData)(nil),    // 0: server.SomeData
	(*PointsCloud)(nil), // 1: base_types.PointsCloud
	(*MotionFrame)(nil), // 2: base_types.MotionFrame
	(*SessionData)(nil), // 3: session.SessionData
	(*BaseReply)(nil),   // 4: proxy.BaseReply
}
var file_actant_test_proto_depIdxs = []int32{
	1, // 0: server.SomeData.pointsCloud:type_name -> base_types.PointsCloud
	2, // 1: server.SomeData.motionFrames:type_name -> base_types.MotionFrame
	0, // 2: server.ActantTest.SendTelemetry:input_type -> server.SomeData
	0, // 3: server.ActantTest.SendTelemetryWithHttp:input_type -> server.SomeData
	3, // 4: server.ActantTest.RouteTelemetry:input_type -> session.SessionData
	4, // 5: server.ActantTest.SendTelemetry:output_type -> proxy.BaseReply
	4, // 6: server.ActantTest.SendTelemetryWithHttp:output_type -> proxy.BaseReply
	0, // 7: server.ActantTest.RouteTelemetry:output_type -> server.SomeData
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_actant_test_proto_init() }
func file_actant_test_proto_init() {
	if File_actant_test_proto != nil {
		return
	}
	file_proxy_proto_init()
	file_session_proto_init()
	file_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_actant_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SomeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actant_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_actant_test_proto_goTypes,
		DependencyIndexes: file_actant_test_proto_depIdxs,
		MessageInfos:      file_actant_test_proto_msgTypes,
	}.Build()
	File_actant_test_proto = out.File
	file_actant_test_proto_rawDesc = nil
	file_actant_test_proto_goTypes = nil
	file_actant_test_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ActantTestClient is the client API for ActantTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActantTestClient interface {
	SendTelemetry(ctx context.Context, in *SomeData, opts ...grpc.CallOption) (*BaseReply, error)
	SendTelemetryWithHttp(ctx context.Context, in *SomeData, opts ...grpc.CallOption) (*BaseReply, error)
	RouteTelemetry(ctx context.Context, opts ...grpc.CallOption) (ActantTest_RouteTelemetryClient, error)
}

type actantTestClient struct {
	cc grpc.ClientConnInterface
}

func NewActantTestClient(cc grpc.ClientConnInterface) ActantTestClient {
	return &actantTestClient{cc}
}

func (c *actantTestClient) SendTelemetry(ctx context.Context, in *SomeData, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/server.ActantTest/SendTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actantTestClient) SendTelemetryWithHttp(ctx context.Context, in *SomeData, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/server.ActantTest/SendTelemetryWithHttp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actantTestClient) RouteTelemetry(ctx context.Context, opts ...grpc.CallOption) (ActantTest_RouteTelemetryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ActantTest_serviceDesc.Streams[0], "/server.ActantTest/RouteTelemetry", opts...)
	if err != nil {
		return nil, err
	}
	x := &actantTestRouteTelemetryClient{stream}
	return x, nil
}

type ActantTest_RouteTelemetryClient interface {
	Send(*SessionData) error
	Recv() (*SomeData, error)
	grpc.ClientStream
}

type actantTestRouteTelemetryClient struct {
	grpc.ClientStream
}

func (x *actantTestRouteTelemetryClient) Send(m *SessionData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actantTestRouteTelemetryClient) Recv() (*SomeData, error) {
	m := new(SomeData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActantTestServer is the server API for ActantTest service.
type ActantTestServer interface {
	SendTelemetry(context.Context, *SomeData) (*BaseReply, error)
	SendTelemetryWithHttp(context.Context, *SomeData) (*BaseReply, error)
	RouteTelemetry(ActantTest_RouteTelemetryServer) error
}

// UnimplementedActantTestServer can be embedded to have forward compatible implementations.
type UnimplementedActantTestServer struct {
}

func (*UnimplementedActantTestServer) SendTelemetry(context.Context, *SomeData) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTelemetry not implemented")
}
func (*UnimplementedActantTestServer) SendTelemetryWithHttp(context.Context, *SomeData) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTelemetryWithHttp not implemented")
}
func (*UnimplementedActantTestServer) RouteTelemetry(ActantTest_RouteTelemetryServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteTelemetry not implemented")
}

func RegisterActantTestServer(s *grpc.Server, srv ActantTestServer) {
	s.RegisterService(&_ActantTest_serviceDesc, srv)
}

func _ActantTest_SendTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SomeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActantTestServer).SendTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.ActantTest/SendTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActantTestServer).SendTelemetry(ctx, req.(*SomeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActantTest_SendTelemetryWithHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SomeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActantTestServer).SendTelemetryWithHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.ActantTest/SendTelemetryWithHttp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActantTestServer).SendTelemetryWithHttp(ctx, req.(*SomeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActantTest_RouteTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActantTestServer).RouteTelemetry(&actantTestRouteTelemetryServer{stream})
}

type ActantTest_RouteTelemetryServer interface {
	Send(*SomeData) error
	Recv() (*SessionData, error)
	grpc.ServerStream
}

type actantTestRouteTelemetryServer struct {
	grpc.ServerStream
}

func (x *actantTestRouteTelemetryServer) Send(m *SomeData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actantTestRouteTelemetryServer) Recv() (*SessionData, error) {
	m := new(SessionData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ActantTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.ActantTest",
	HandlerType: (*ActantTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTelemetry",
			Handler:    _ActantTest_SendTelemetry_Handler,
		},
		{
			MethodName: "SendTelemetryWithHttp",
			Handler:    _ActantTest_SendTelemetryWithHttp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteTelemetry",
			Handler:       _ActantTest_RouteTelemetry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "actant_test.proto",
}
