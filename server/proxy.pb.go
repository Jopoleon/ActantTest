// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: proxy.proto

package server

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BaseReply) Reset() {
	*x = BaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseReply) ProtoMessage() {}

func (x *BaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseReply.ProtoReflect.Descriptor instead.
func (*BaseReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{0}
}

type BaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{1}
}

// DEPRECATED! TODO: remove
type SessionFinalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultArSession       *ARSessionFrame `protobuf:"bytes,1,opt,name=result_ar_session,json=resultArSession,proto3" json:"result_ar_session,omitempty"`                     // deprecated
	VideoStartTimestamp   float64         `protobuf:"fixed64,2,opt,name=video_start_timestamp,json=videoStartTimestamp,proto3" json:"video_start_timestamp,omitempty"`       // deprecated, moved to SessionHeadData
	IntrinsicMatrix       *Matrix3X3      `protobuf:"bytes,3,opt,name=intrinsic_matrix,json=intrinsicMatrix,proto3" json:"intrinsic_matrix,omitempty"`                       // deprecated, moved to SessionHeadData
	MotionFps             uint32          `protobuf:"varint,4,opt,name=motion_fps,json=motionFps,proto3" json:"motion_fps,omitempty"`                                        // deprecated, moved to SessionHeadData
	SessionStartTimestamp float64         `protobuf:"fixed64,5,opt,name=session_start_timestamp,json=sessionStartTimestamp,proto3" json:"session_start_timestamp,omitempty"` // deprecated, moved to SessionHeadData
	SessionEndTimestamp   float64         `protobuf:"fixed64,6,opt,name=session_end_timestamp,json=sessionEndTimestamp,proto3" json:"session_end_timestamp,omitempty"`       // deprecated
}

func (x *SessionFinalData) Reset() {
	*x = SessionFinalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionFinalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionFinalData) ProtoMessage() {}

func (x *SessionFinalData) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionFinalData.ProtoReflect.Descriptor instead.
func (*SessionFinalData) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *SessionFinalData) GetResultArSession() *ARSessionFrame {
	if x != nil {
		return x.ResultArSession
	}
	return nil
}

func (x *SessionFinalData) GetVideoStartTimestamp() float64 {
	if x != nil {
		return x.VideoStartTimestamp
	}
	return 0
}

func (x *SessionFinalData) GetIntrinsicMatrix() *Matrix3X3 {
	if x != nil {
		return x.IntrinsicMatrix
	}
	return nil
}

func (x *SessionFinalData) GetMotionFps() uint32 {
	if x != nil {
		return x.MotionFps
	}
	return 0
}

func (x *SessionFinalData) GetSessionStartTimestamp() float64 {
	if x != nil {
		return x.SessionStartTimestamp
	}
	return 0
}

func (x *SessionFinalData) GetSessionEndTimestamp() float64 {
	if x != nil {
		return x.SessionEndTimestamp
	}
	return 0
}

type SessionHeadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoStartTimestamp     float64    `protobuf:"fixed64,2,opt,name=video_start_timestamp,json=videoStartTimestamp,proto3" json:"video_start_timestamp,omitempty"`
	IntrinsicMatrix         *Matrix3X3 `protobuf:"bytes,3,opt,name=intrinsic_matrix,json=intrinsicMatrix,proto3" json:"intrinsic_matrix,omitempty"`
	MotionFps               uint32     `protobuf:"varint,4,opt,name=motion_fps,json=motionFps,proto3" json:"motion_fps,omitempty"`
	SessionStartTimestamp   float64    `protobuf:"fixed64,5,opt,name=session_start_timestamp,json=sessionStartTimestamp,proto3" json:"session_start_timestamp,omitempty"`
	UserId                  uint64     `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceModel             string     `protobuf:"bytes,6,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	DeviceOs                string     `protobuf:"bytes,7,opt,name=device_os,json=deviceOs,proto3" json:"device_os,omitempty"`
	FrameIndex              uint32     `protobuf:"varint,9,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
	IsDetailFeaturesSession bool       `protobuf:"varint,10,opt,name=is_detail_features_session,json=isDetailFeaturesSession,proto3" json:"is_detail_features_session,omitempty"`
	OrbFrameWidth           uint32     `protobuf:"varint,12,opt,name=orb_frame_width,json=orbFrameWidth,proto3" json:"orb_frame_width,omitempty"`
	OrbFrameHeight          uint32     `protobuf:"varint,13,opt,name=orb_frame_height,json=orbFrameHeight,proto3" json:"orb_frame_height,omitempty"`
	ArFrameWidth            uint32     `protobuf:"varint,14,opt,name=ar_frame_width,json=arFrameWidth,proto3" json:"ar_frame_width,omitempty"`
	ArFrameHeight           uint32     `protobuf:"varint,15,opt,name=ar_frame_height,json=arFrameHeight,proto3" json:"ar_frame_height,omitempty"`
	IsTest                  bool       `protobuf:"varint,16,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
	// for extra data like app build version etc
	// {"app_version": "dev bulid 65", ... }
	ExtraData map[string]string `protobuf:"bytes,11,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SessionHeadData) Reset() {
	*x = SessionHeadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionHeadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionHeadData) ProtoMessage() {}

func (x *SessionHeadData) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionHeadData.ProtoReflect.Descriptor instead.
func (*SessionHeadData) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *SessionHeadData) GetVideoStartTimestamp() float64 {
	if x != nil {
		return x.VideoStartTimestamp
	}
	return 0
}

func (x *SessionHeadData) GetIntrinsicMatrix() *Matrix3X3 {
	if x != nil {
		return x.IntrinsicMatrix
	}
	return nil
}

func (x *SessionHeadData) GetMotionFps() uint32 {
	if x != nil {
		return x.MotionFps
	}
	return 0
}

func (x *SessionHeadData) GetSessionStartTimestamp() float64 {
	if x != nil {
		return x.SessionStartTimestamp
	}
	return 0
}

func (x *SessionHeadData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionHeadData) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *SessionHeadData) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *SessionHeadData) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *SessionHeadData) GetIsDetailFeaturesSession() bool {
	if x != nil {
		return x.IsDetailFeaturesSession
	}
	return false
}

func (x *SessionHeadData) GetOrbFrameWidth() uint32 {
	if x != nil {
		return x.OrbFrameWidth
	}
	return 0
}

func (x *SessionHeadData) GetOrbFrameHeight() uint32 {
	if x != nil {
		return x.OrbFrameHeight
	}
	return 0
}

func (x *SessionHeadData) GetArFrameWidth() uint32 {
	if x != nil {
		return x.ArFrameWidth
	}
	return 0
}

func (x *SessionHeadData) GetArFrameHeight() uint32 {
	if x != nil {
		return x.ArFrameHeight
	}
	return 0
}

func (x *SessionHeadData) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

func (x *SessionHeadData) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type LoadWorldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates *GpsCoordinates `protobuf:"bytes,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	//TODO: этот фрейм отсылается с сервера, поэтому нужно cюда прокидывать при запросах
	FrameIndex uint32 `protobuf:"varint,2,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *LoadWorldRequest) Reset() {
	*x = LoadWorldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadWorldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadWorldRequest) ProtoMessage() {}

func (x *LoadWorldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadWorldRequest.ProtoReflect.Descriptor instead.
func (*LoadWorldRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *LoadWorldRequest) GetCoordinates() *GpsCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *LoadWorldRequest) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type LoadWorldReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets                      []*AssetForDetection `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	Posts                       []*Post              `protobuf:"bytes,2,rep,name=posts,proto3" json:"posts,omitempty"`
	SessionId                   string               `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionLastUpdatedTimestamp float64              `protobuf:"fixed64,4,opt,name=session_last_updated_timestamp,json=sessionLastUpdatedTimestamp,proto3" json:"session_last_updated_timestamp,omitempty"`
	SendToClientTimestamp       float64              `protobuf:"fixed64,5,opt,name=send_to_client_timestamp,json=sendToClientTimestamp,proto3" json:"send_to_client_timestamp,omitempty"`
	//NB: look at LoadWorldRequest.frame_index comment
	FrameIndex uint32 `protobuf:"varint,6,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *LoadWorldReply) Reset() {
	*x = LoadWorldReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadWorldReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadWorldReply) ProtoMessage() {}

func (x *LoadWorldReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadWorldReply.ProtoReflect.Descriptor instead.
func (*LoadWorldReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *LoadWorldReply) GetAssets() []*AssetForDetection {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *LoadWorldReply) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *LoadWorldReply) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LoadWorldReply) GetSessionLastUpdatedTimestamp() float64 {
	if x != nil {
		return x.SessionLastUpdatedTimestamp
	}
	return 0
}

func (x *LoadWorldReply) GetSendToClientTimestamp() float64 {
	if x != nil {
		return x.SendToClientTimestamp
	}
	return 0
}

func (x *LoadWorldReply) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type WorldmapSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string  `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	IosWorldmapUrl string  `protobuf:"bytes,2,opt,name=ios_worldmap_url,json=iosWorldmapUrl,proto3" json:"ios_worldmap_url,omitempty"`
	Posts          []*Post `protobuf:"bytes,3,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *WorldmapSession) Reset() {
	*x = WorldmapSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldmapSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldmapSession) ProtoMessage() {}

func (x *WorldmapSession) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldmapSession.ProtoReflect.Descriptor instead.
func (*WorldmapSession) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *WorldmapSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WorldmapSession) GetIosWorldmapUrl() string {
	if x != nil {
		return x.IosWorldmapUrl
	}
	return ""
}

func (x *WorldmapSession) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

type MultipleLoadWorldReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadWorldReply  []*LoadWorldReply `protobuf:"bytes,1,rep,name=load_world_reply,json=loadWorldReply,proto3" json:"load_world_reply,omitempty"`
	WorldmapSession *WorldmapSession  `protobuf:"bytes,2,opt,name=worldmap_session,json=worldmapSession,proto3" json:"worldmap_session,omitempty"`
}

func (x *MultipleLoadWorldReply) Reset() {
	*x = MultipleLoadWorldReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleLoadWorldReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleLoadWorldReply) ProtoMessage() {}

func (x *MultipleLoadWorldReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleLoadWorldReply.ProtoReflect.Descriptor instead.
func (*MultipleLoadWorldReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{7}
}

func (x *MultipleLoadWorldReply) GetLoadWorldReply() []*LoadWorldReply {
	if x != nil {
		return x.LoadWorldReply
	}
	return nil
}

func (x *MultipleLoadWorldReply) GetWorldmapSession() *WorldmapSession {
	if x != nil {
		return x.WorldmapSession
	}
	return nil
}

type GetActiveSessionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*ActiveSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetActiveSessionsReply) Reset() {
	*x = GetActiveSessionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveSessionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSessionsReply) ProtoMessage() {}

func (x *GetActiveSessionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSessionsReply.ProtoReflect.Descriptor instead.
func (*GetActiveSessionsReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{8}
}

func (x *GetActiveSessionsReply) GetSessions() []*ActiveSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type CreateARPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// нет на quick-постах и worldmap-based-объектах
	Asset             *AssetForDetection `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	CreatePostRequest *CreatePostRequest `protobuf:"bytes,2,opt,name=create_post_request,json=createPostRequest,proto3" json:"create_post_request,omitempty"`
	IsTest            bool               `protobuf:"varint,3,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
}

func (x *CreateARPostRequest) Reset() {
	*x = CreateARPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateARPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateARPostRequest) ProtoMessage() {}

func (x *CreateARPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateARPostRequest.ProtoReflect.Descriptor instead.
func (*CreateARPostRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{9}
}

func (x *CreateARPostRequest) GetAsset() *AssetForDetection {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *CreateARPostRequest) GetCreatePostRequest() *CreatePostRequest {
	if x != nil {
		return x.CreatePostRequest
	}
	return nil
}

func (x *CreateARPostRequest) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

type DeleteARPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post *PostCompositeID `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *DeleteARPostRequest) Reset() {
	*x = DeleteARPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteARPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteARPostRequest) ProtoMessage() {}

func (x *DeleteARPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteARPostRequest.ProtoReflect.Descriptor instead.
func (*DeleteARPostRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteARPostRequest) GetPost() *PostCompositeID {
	if x != nil {
		return x.Post
	}
	return nil
}

type CreateARPostReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *CreateARPostReply) Reset() {
	*x = CreateARPostReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateARPostReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateARPostReply) ProtoMessage() {}

func (x *CreateARPostReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateARPostReply.ProtoReflect.Descriptor instead.
func (*CreateARPostReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{11}
}

func (x *CreateARPostReply) GetPost() *Post {
	if x != nil {
		return x.Post
	}
	return nil
}

type SessionStreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*SessionStreamMessage_DataFrame
	//	*SessionStreamMessage_Plane
	//	*SessionStreamMessage_DetectedAsset
	//	*SessionStreamMessage_MotionFrame
	//	*SessionStreamMessage_LoadWorld
	//	*SessionStreamMessage_HwFrame
	//	*SessionStreamMessage_SessionHeadData
	Data isSessionStreamMessage_Data `protobuf_oneof:"data"`
}

func (x *SessionStreamMessage) Reset() {
	*x = SessionStreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStreamMessage) ProtoMessage() {}

func (x *SessionStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStreamMessage.ProtoReflect.Descriptor instead.
func (*SessionStreamMessage) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{12}
}

func (m *SessionStreamMessage) GetData() isSessionStreamMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SessionStreamMessage) GetDataFrame() *DataFrame {
	if x, ok := x.GetData().(*SessionStreamMessage_DataFrame); ok {
		return x.DataFrame
	}
	return nil
}

func (x *SessionStreamMessage) GetPlane() *Plane {
	if x, ok := x.GetData().(*SessionStreamMessage_Plane); ok {
		return x.Plane
	}
	return nil
}

func (x *SessionStreamMessage) GetDetectedAsset() *DetectedAsset {
	if x, ok := x.GetData().(*SessionStreamMessage_DetectedAsset); ok {
		return x.DetectedAsset
	}
	return nil
}

func (x *SessionStreamMessage) GetMotionFrame() *MotionFrame {
	if x, ok := x.GetData().(*SessionStreamMessage_MotionFrame); ok {
		return x.MotionFrame
	}
	return nil
}

func (x *SessionStreamMessage) GetLoadWorld() *LoadWorldReply {
	if x, ok := x.GetData().(*SessionStreamMessage_LoadWorld); ok {
		return x.LoadWorld
	}
	return nil
}

func (x *SessionStreamMessage) GetHwFrame() *HardwareFrame {
	if x, ok := x.GetData().(*SessionStreamMessage_HwFrame); ok {
		return x.HwFrame
	}
	return nil
}

func (x *SessionStreamMessage) GetSessionHeadData() *SessionHeadData {
	if x, ok := x.GetData().(*SessionStreamMessage_SessionHeadData); ok {
		return x.SessionHeadData
	}
	return nil
}

type isSessionStreamMessage_Data interface {
	isSessionStreamMessage_Data()
}

type SessionStreamMessage_DataFrame struct {
	DataFrame *DataFrame `protobuf:"bytes,1,opt,name=data_frame,json=dataFrame,proto3,oneof"`
}

type SessionStreamMessage_Plane struct {
	Plane *Plane `protobuf:"bytes,2,opt,name=plane,proto3,oneof"`
}

type SessionStreamMessage_DetectedAsset struct {
	DetectedAsset *DetectedAsset `protobuf:"bytes,3,opt,name=detected_asset,json=detectedAsset,proto3,oneof"`
}

type SessionStreamMessage_MotionFrame struct {
	MotionFrame *MotionFrame `protobuf:"bytes,4,opt,name=motion_frame,json=motionFrame,proto3,oneof"`
}

type SessionStreamMessage_LoadWorld struct {
	// SessionFinalData final_data = 5;
	LoadWorld *LoadWorldReply `protobuf:"bytes,6,opt,name=load_world,json=loadWorld,proto3,oneof"`
}

type SessionStreamMessage_HwFrame struct {
	HwFrame *HardwareFrame `protobuf:"bytes,7,opt,name=hw_frame,json=hwFrame,proto3,oneof"`
}

type SessionStreamMessage_SessionHeadData struct {
	SessionHeadData *SessionHeadData `protobuf:"bytes,8,opt,name=session_head_data,json=sessionHeadData,proto3,oneof"`
}

func (*SessionStreamMessage_DataFrame) isSessionStreamMessage_Data() {}

func (*SessionStreamMessage_Plane) isSessionStreamMessage_Data() {}

func (*SessionStreamMessage_DetectedAsset) isSessionStreamMessage_Data() {}

func (*SessionStreamMessage_MotionFrame) isSessionStreamMessage_Data() {}

func (*SessionStreamMessage_LoadWorld) isSessionStreamMessage_Data() {}

func (*SessionStreamMessage_HwFrame) isSessionStreamMessage_Data() {}

func (*SessionStreamMessage_SessionHeadData) isSessionStreamMessage_Data() {}

type SaveVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoUrl  string `protobuf:"bytes,1,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SaveVideoRequest) Reset() {
	*x = SaveVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveVideoRequest) ProtoMessage() {}

func (x *SaveVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveVideoRequest.ProtoReflect.Descriptor instead.
func (*SaveVideoRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{13}
}

func (x *SaveVideoRequest) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *SaveVideoRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SetLocationWorldMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	IosWorldmapUrl string          `protobuf:"bytes,2,opt,name=ios_worldmap_url,json=iosWorldmapUrl,proto3" json:"ios_worldmap_url,omitempty"`
	Coordinates    *GpsCoordinates `protobuf:"bytes,3,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *SetLocationWorldMapRequest) Reset() {
	*x = SetLocationWorldMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLocationWorldMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLocationWorldMapRequest) ProtoMessage() {}

func (x *SetLocationWorldMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLocationWorldMapRequest.ProtoReflect.Descriptor instead.
func (*SetLocationWorldMapRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{14}
}

func (x *SetLocationWorldMapRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SetLocationWorldMapRequest) GetIosWorldmapUrl() string {
	if x != nil {
		return x.IosWorldmapUrl
	}
	return ""
}

func (x *SetLocationWorldMapRequest) GetCoordinates() *GpsCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type LocationWorldMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	IosWorldmapUrl string          `protobuf:"bytes,2,opt,name=ios_worldmap_url,json=iosWorldmapUrl,proto3" json:"ios_worldmap_url,omitempty"`
	Coordinates    *GpsCoordinates `protobuf:"bytes,3,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *LocationWorldMap) Reset() {
	*x = LocationWorldMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationWorldMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationWorldMap) ProtoMessage() {}

func (x *LocationWorldMap) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationWorldMap.ProtoReflect.Descriptor instead.
func (*LocationWorldMap) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{15}
}

func (x *LocationWorldMap) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LocationWorldMap) GetIosWorldmapUrl() string {
	if x != nil {
		return x.IosWorldmapUrl
	}
	return ""
}

func (x *LocationWorldMap) GetCoordinates() *GpsCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type GetListLocationWorldMapReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worldmaps []*LocationWorldMap `protobuf:"bytes,1,rep,name=worldmaps,proto3" json:"worldmaps,omitempty"`
}

func (x *GetListLocationWorldMapReply) Reset() {
	*x = GetListLocationWorldMapReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListLocationWorldMapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListLocationWorldMapReply) ProtoMessage() {}

func (x *GetListLocationWorldMapReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListLocationWorldMapReply.ProtoReflect.Descriptor instead.
func (*GetListLocationWorldMapReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{16}
}

func (x *GetListLocationWorldMapReply) GetWorldmaps() []*LocationWorldMap {
	if x != nil {
		return x.Worldmaps
	}
	return nil
}

type DeleteLocationWorldMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DeleteLocationWorldMapRequest) Reset() {
	*x = DeleteLocationWorldMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLocationWorldMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLocationWorldMapRequest) ProtoMessage() {}

func (x *DeleteLocationWorldMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLocationWorldMapRequest.ProtoReflect.Descriptor instead.
func (*DeleteLocationWorldMapRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteLocationWorldMapRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type DeleteTestSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DeleteTestSessionRequest) Reset() {
	*x = DeleteTestSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestSessionRequest) ProtoMessage() {}

func (x *DeleteTestSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestSessionRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteTestSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{19}
}

func (x *GetSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string             `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ProtoUrl  string             `protobuf:"bytes,2,opt,name=proto_url,json=protoUrl,proto3" json:"proto_url,omitempty"`
	VideoUrl  string             `protobuf:"bytes,3,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	PostList  []*PostCompositeID `protobuf:"bytes,4,rep,name=post_list,json=postList,proto3" json:"post_list,omitempty"`
}

func (x *GetSessionReply) Reset() {
	*x = GetSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionReply) ProtoMessage() {}

func (x *GetSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionReply.ProtoReflect.Descriptor instead.
func (*GetSessionReply) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{20}
}

func (x *GetSessionReply) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetSessionReply) GetProtoUrl() string {
	if x != nil {
		return x.ProtoUrl
	}
	return ""
}

func (x *GetSessionReply) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *GetSessionReply) GetPostList() []*PostCompositeID {
	if x != nil {
		return x.PostList
	}
	return nil
}

var File_proxy_proto protoreflect.FileDescriptor

var file_proxy_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x52, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69,
	0x63, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x33, 0x78, 0x33, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xd2, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x78, 0x33, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x72,
	0x69, 0x6e, 0x73, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x1a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x62,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x62, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x62,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x70, 0x73,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa9, 0x02, 0x0a, 0x0e, 0x4c, 0x6f,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7e, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6f, 0x73, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x41, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35,
	0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x49, 0x44, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x73,
	0x74, 0x22, 0xb9, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x68, 0x77, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a,
	0x10, 0x53, 0x61, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6f, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6f, 0x73, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d,
	0x61, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6f, 0x73, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x35, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x6d, 0x61, 0x70, 0x73, 0x22, 0x3e, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x72, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x49, 0x44, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xf8, 0x05, 0x0a, 0x09, 0x41, 0x52, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x52, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x52, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x12, 0x49,
	0x0a, 0x0a, 0x48, 0x65, 0x61, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x32, 0xb5, 0x04, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12,
	0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x30, 0x01, 0x12,
	0x4a, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proxy_proto_rawDescOnce sync.Once
	file_proxy_proto_rawDescData = file_proxy_proto_rawDesc
)

func file_proxy_proto_rawDescGZIP() []byte {
	file_proxy_proto_rawDescOnce.Do(func() {
		file_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_proxy_proto_rawDescData)
	})
	return file_proxy_proto_rawDescData
}

var file_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proxy_proto_goTypes = []interface{}{
	(*BaseReply)(nil),                     // 0: proxy.BaseReply
	(*BaseRequest)(nil),                   // 1: proxy.BaseRequest
	(*SessionFinalData)(nil),              // 2: proxy.SessionFinalData
	(*SessionHeadData)(nil),               // 3: proxy.SessionHeadData
	(*LoadWorldRequest)(nil),              // 4: proxy.LoadWorldRequest
	(*LoadWorldReply)(nil),                // 5: proxy.LoadWorldReply
	(*WorldmapSession)(nil),               // 6: proxy.WorldmapSession
	(*MultipleLoadWorldReply)(nil),        // 7: proxy.MultipleLoadWorldReply
	(*GetActiveSessionsReply)(nil),        // 8: proxy.GetActiveSessionsReply
	(*CreateARPostRequest)(nil),           // 9: proxy.CreateARPostRequest
	(*DeleteARPostRequest)(nil),           // 10: proxy.DeleteARPostRequest
	(*CreateARPostReply)(nil),             // 11: proxy.CreateARPostReply
	(*SessionStreamMessage)(nil),          // 12: proxy.SessionStreamMessage
	(*SaveVideoRequest)(nil),              // 13: proxy.SaveVideoRequest
	(*SetLocationWorldMapRequest)(nil),    // 14: proxy.SetLocationWorldMapRequest
	(*LocationWorldMap)(nil),              // 15: proxy.LocationWorldMap
	(*GetListLocationWorldMapReply)(nil),  // 16: proxy.GetListLocationWorldMapReply
	(*DeleteLocationWorldMapRequest)(nil), // 17: proxy.DeleteLocationWorldMapRequest
	(*DeleteTestSessionRequest)(nil),      // 18: proxy.DeleteTestSessionRequest
	(*GetSessionRequest)(nil),             // 19: proxy.GetSessionRequest
	(*GetSessionReply)(nil),               // 20: proxy.GetSessionReply
	nil,                                   // 21: proxy.SessionHeadData.ExtraDataEntry
	(*ARSessionFrame)(nil),                // 22: base_types.ARSessionFrame
	(*Matrix3X3)(nil),                     // 23: base_types.Matrix3x3
	(*GpsCoordinates)(nil),                // 24: base_types.GpsCoordinates
	(*AssetForDetection)(nil),             // 25: base_types.AssetForDetection
	(*Post)(nil),                          // 26: social.Post
	(*ActiveSession)(nil),                 // 27: base_types.ActiveSession
	(*CreatePostRequest)(nil),             // 28: social.CreatePostRequest
	(*PostCompositeID)(nil),               // 29: social.PostCompositeID
	(*DataFrame)(nil),                     // 30: base_types.DataFrame
	(*Plane)(nil),                         // 31: base_types.Plane
	(*DetectedAsset)(nil),                 // 32: base_types.DetectedAsset
	(*MotionFrame)(nil),                   // 33: base_types.MotionFrame
	(*HardwareFrame)(nil),                 // 34: base_types.HardwareFrame
	(*HealthCheckRequest)(nil),            // 35: base_types.HealthCheckRequest
	(*EmptyRequest)(nil),                  // 36: base_types.EmptyRequest
	(*HeathCheckReply)(nil),               // 37: base_types.HeathCheckReply
	(*GetPositionReply)(nil),              // 38: positioning.GetPositionReply
}
var file_proxy_proto_depIdxs = []int32{
	22, // 0: proxy.SessionFinalData.result_ar_session:type_name -> base_types.ARSessionFrame
	23, // 1: proxy.SessionFinalData.intrinsic_matrix:type_name -> base_types.Matrix3x3
	23, // 2: proxy.SessionHeadData.intrinsic_matrix:type_name -> base_types.Matrix3x3
	21, // 3: proxy.SessionHeadData.extra_data:type_name -> proxy.SessionHeadData.ExtraDataEntry
	24, // 4: proxy.LoadWorldRequest.coordinates:type_name -> base_types.GpsCoordinates
	25, // 5: proxy.LoadWorldReply.assets:type_name -> base_types.AssetForDetection
	26, // 6: proxy.LoadWorldReply.posts:type_name -> social.Post
	26, // 7: proxy.WorldmapSession.posts:type_name -> social.Post
	5,  // 8: proxy.MultipleLoadWorldReply.load_world_reply:type_name -> proxy.LoadWorldReply
	6,  // 9: proxy.MultipleLoadWorldReply.worldmap_session:type_name -> proxy.WorldmapSession
	27, // 10: proxy.GetActiveSessionsReply.sessions:type_name -> base_types.ActiveSession
	25, // 11: proxy.CreateARPostRequest.asset:type_name -> base_types.AssetForDetection
	28, // 12: proxy.CreateARPostRequest.create_post_request:type_name -> social.CreatePostRequest
	29, // 13: proxy.DeleteARPostRequest.post:type_name -> social.PostCompositeID
	26, // 14: proxy.CreateARPostReply.post:type_name -> social.Post
	30, // 15: proxy.SessionStreamMessage.data_frame:type_name -> base_types.DataFrame
	31, // 16: proxy.SessionStreamMessage.plane:type_name -> base_types.Plane
	32, // 17: proxy.SessionStreamMessage.detected_asset:type_name -> base_types.DetectedAsset
	33, // 18: proxy.SessionStreamMessage.motion_frame:type_name -> base_types.MotionFrame
	5,  // 19: proxy.SessionStreamMessage.load_world:type_name -> proxy.LoadWorldReply
	34, // 20: proxy.SessionStreamMessage.hw_frame:type_name -> base_types.HardwareFrame
	3,  // 21: proxy.SessionStreamMessage.session_head_data:type_name -> proxy.SessionHeadData
	24, // 22: proxy.SetLocationWorldMapRequest.coordinates:type_name -> base_types.GpsCoordinates
	24, // 23: proxy.LocationWorldMap.coordinates:type_name -> base_types.GpsCoordinates
	15, // 24: proxy.GetListLocationWorldMapReply.worldmaps:type_name -> proxy.LocationWorldMap
	29, // 25: proxy.GetSessionReply.post_list:type_name -> social.PostCompositeID
	9,  // 26: proxy.ARService.CreateARPost:input_type -> proxy.CreateARPostRequest
	10, // 27: proxy.ARService.DeleteARPost:input_type -> proxy.DeleteARPostRequest
	14, // 28: proxy.ARService.SetLocationWorldMap:input_type -> proxy.SetLocationWorldMapRequest
	1,  // 29: proxy.ARService.GetListLocationWorldMap:input_type -> proxy.BaseRequest
	17, // 30: proxy.ARService.DeleteLocationWorldMap:input_type -> proxy.DeleteLocationWorldMapRequest
	4,  // 31: proxy.ARService.LoadWorld:input_type -> proxy.LoadWorldRequest
	1,  // 32: proxy.ARService.LoadTutorialWorld:input_type -> proxy.BaseRequest
	4,  // 33: proxy.ARService.StreamMultipleLoadWorld:input_type -> proxy.LoadWorldRequest
	35, // 34: proxy.ARService.HeathCheck:input_type -> base_types.HealthCheckRequest
	18, // 35: proxy.ARService.DeleteTestSession:input_type -> proxy.DeleteTestSessionRequest
	12, // 36: proxy.TelemetryService.InStream:input_type -> proxy.SessionStreamMessage
	1,  // 37: proxy.TelemetryService.OutStream:input_type -> proxy.BaseRequest
	2,  // 38: proxy.TelemetryService.Finalize:input_type -> proxy.SessionFinalData
	1,  // 39: proxy.TelemetryService.GetActiveSessions:input_type -> proxy.BaseRequest
	13, // 40: proxy.TelemetryService.SaveTelemetryVideo:input_type -> proxy.SaveVideoRequest
	19, // 41: proxy.TelemetryService.GetSession:input_type -> proxy.GetSessionRequest
	36, // 42: proxy.TelemetryService.ListenPositions:input_type -> base_types.EmptyRequest
	35, // 43: proxy.TelemetryService.HealthCheck:input_type -> base_types.HealthCheckRequest
	11, // 44: proxy.ARService.CreateARPost:output_type -> proxy.CreateARPostReply
	0,  // 45: proxy.ARService.DeleteARPost:output_type -> proxy.BaseReply
	0,  // 46: proxy.ARService.SetLocationWorldMap:output_type -> proxy.BaseReply
	16, // 47: proxy.ARService.GetListLocationWorldMap:output_type -> proxy.GetListLocationWorldMapReply
	0,  // 48: proxy.ARService.DeleteLocationWorldMap:output_type -> proxy.BaseReply
	5,  // 49: proxy.ARService.LoadWorld:output_type -> proxy.LoadWorldReply
	5,  // 50: proxy.ARService.LoadTutorialWorld:output_type -> proxy.LoadWorldReply
	7,  // 51: proxy.ARService.StreamMultipleLoadWorld:output_type -> proxy.MultipleLoadWorldReply
	37, // 52: proxy.ARService.HeathCheck:output_type -> base_types.HeathCheckReply
	0,  // 53: proxy.ARService.DeleteTestSession:output_type -> proxy.BaseReply
	0,  // 54: proxy.TelemetryService.InStream:output_type -> proxy.BaseReply
	12, // 55: proxy.TelemetryService.OutStream:output_type -> proxy.SessionStreamMessage
	0,  // 56: proxy.TelemetryService.Finalize:output_type -> proxy.BaseReply
	8,  // 57: proxy.TelemetryService.GetActiveSessions:output_type -> proxy.GetActiveSessionsReply
	0,  // 58: proxy.TelemetryService.SaveTelemetryVideo:output_type -> proxy.BaseReply
	20, // 59: proxy.TelemetryService.GetSession:output_type -> proxy.GetSessionReply
	38, // 60: proxy.TelemetryService.ListenPositions:output_type -> positioning.GetPositionReply
	37, // 61: proxy.TelemetryService.HealthCheck:output_type -> base_types.HeathCheckReply
	44, // [44:62] is the sub-list for method output_type
	26, // [26:44] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_proxy_proto_init() }
func file_proxy_proto_init() {
	if File_proxy_proto != nil {
		return
	}
	file_base_types_proto_init()
	file_social_proto_init()
	file_positioning_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionFinalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionHeadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadWorldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadWorldReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldmapSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleLoadWorldReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveSessionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateARPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteARPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateARPostReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLocationWorldMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationWorldMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListLocationWorldMapReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLocationWorldMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proxy_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SessionStreamMessage_DataFrame)(nil),
		(*SessionStreamMessage_Plane)(nil),
		(*SessionStreamMessage_DetectedAsset)(nil),
		(*SessionStreamMessage_MotionFrame)(nil),
		(*SessionStreamMessage_LoadWorld)(nil),
		(*SessionStreamMessage_HwFrame)(nil),
		(*SessionStreamMessage_SessionHeadData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proxy_proto_goTypes,
		DependencyIndexes: file_proxy_proto_depIdxs,
		MessageInfos:      file_proxy_proto_msgTypes,
	}.Build()
	File_proxy_proto = out.File
	file_proxy_proto_rawDesc = nil
	file_proxy_proto_goTypes = nil
	file_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ARServiceClient is the client API for ARService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ARServiceClient interface {
	// посты
	CreateARPost(ctx context.Context, in *CreateARPostRequest, opts ...grpc.CallOption) (*CreateARPostReply, error)
	DeleteARPost(ctx context.Context, in *DeleteARPostRequest, opts ...grpc.CallOption) (*BaseReply, error)
	// "портим" место, где можно было бы разместить ассеты ворлдмапом, который будет отвечать за распознавание
	SetLocationWorldMap(ctx context.Context, in *SetLocationWorldMapRequest, opts ...grpc.CallOption) (*BaseReply, error)
	GetListLocationWorldMap(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*GetListLocationWorldMapReply, error)
	DeleteLocationWorldMap(ctx context.Context, in *DeleteLocationWorldMapRequest, opts ...grpc.CallOption) (*BaseReply, error)
	LoadWorld(ctx context.Context, in *LoadWorldRequest, opts ...grpc.CallOption) (*LoadWorldReply, error)
	LoadTutorialWorld(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*LoadWorldReply, error)
	StreamMultipleLoadWorld(ctx context.Context, opts ...grpc.CallOption) (ARService_StreamMultipleLoadWorldClient, error)
	HeathCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HeathCheckReply, error)
	DeleteTestSession(ctx context.Context, in *DeleteTestSessionRequest, opts ...grpc.CallOption) (*BaseReply, error)
}

type aRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewARServiceClient(cc grpc.ClientConnInterface) ARServiceClient {
	return &aRServiceClient{cc}
}

func (c *aRServiceClient) CreateARPost(ctx context.Context, in *CreateARPostRequest, opts ...grpc.CallOption) (*CreateARPostReply, error) {
	out := new(CreateARPostReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/CreateARPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) DeleteARPost(ctx context.Context, in *DeleteARPostRequest, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/DeleteARPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) SetLocationWorldMap(ctx context.Context, in *SetLocationWorldMapRequest, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/SetLocationWorldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) GetListLocationWorldMap(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*GetListLocationWorldMapReply, error) {
	out := new(GetListLocationWorldMapReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/GetListLocationWorldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) DeleteLocationWorldMap(ctx context.Context, in *DeleteLocationWorldMapRequest, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/DeleteLocationWorldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) LoadWorld(ctx context.Context, in *LoadWorldRequest, opts ...grpc.CallOption) (*LoadWorldReply, error) {
	out := new(LoadWorldReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/LoadWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) LoadTutorialWorld(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*LoadWorldReply, error) {
	out := new(LoadWorldReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/LoadTutorialWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) StreamMultipleLoadWorld(ctx context.Context, opts ...grpc.CallOption) (ARService_StreamMultipleLoadWorldClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ARService_serviceDesc.Streams[0], "/proxy.ARService/StreamMultipleLoadWorld", opts...)
	if err != nil {
		return nil, err
	}
	x := &aRServiceStreamMultipleLoadWorldClient{stream}
	return x, nil
}

type ARService_StreamMultipleLoadWorldClient interface {
	Send(*LoadWorldRequest) error
	Recv() (*MultipleLoadWorldReply, error)
	grpc.ClientStream
}

type aRServiceStreamMultipleLoadWorldClient struct {
	grpc.ClientStream
}

func (x *aRServiceStreamMultipleLoadWorldClient) Send(m *LoadWorldRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aRServiceStreamMultipleLoadWorldClient) Recv() (*MultipleLoadWorldReply, error) {
	m := new(MultipleLoadWorldReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aRServiceClient) HeathCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HeathCheckReply, error) {
	out := new(HeathCheckReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/HeathCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aRServiceClient) DeleteTestSession(ctx context.Context, in *DeleteTestSessionRequest, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/proxy.ARService/DeleteTestSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ARServiceServer is the server API for ARService service.
type ARServiceServer interface {
	// посты
	CreateARPost(context.Context, *CreateARPostRequest) (*CreateARPostReply, error)
	DeleteARPost(context.Context, *DeleteARPostRequest) (*BaseReply, error)
	// "портим" место, где можно было бы разместить ассеты ворлдмапом, который будет отвечать за распознавание
	SetLocationWorldMap(context.Context, *SetLocationWorldMapRequest) (*BaseReply, error)
	GetListLocationWorldMap(context.Context, *BaseRequest) (*GetListLocationWorldMapReply, error)
	DeleteLocationWorldMap(context.Context, *DeleteLocationWorldMapRequest) (*BaseReply, error)
	LoadWorld(context.Context, *LoadWorldRequest) (*LoadWorldReply, error)
	LoadTutorialWorld(context.Context, *BaseRequest) (*LoadWorldReply, error)
	StreamMultipleLoadWorld(ARService_StreamMultipleLoadWorldServer) error
	HeathCheck(context.Context, *HealthCheckRequest) (*HeathCheckReply, error)
	DeleteTestSession(context.Context, *DeleteTestSessionRequest) (*BaseReply, error)
}

// UnimplementedARServiceServer can be embedded to have forward compatible implementations.
type UnimplementedARServiceServer struct {
}

func (*UnimplementedARServiceServer) CreateARPost(context.Context, *CreateARPostRequest) (*CreateARPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateARPost not implemented")
}
func (*UnimplementedARServiceServer) DeleteARPost(context.Context, *DeleteARPostRequest) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteARPost not implemented")
}
func (*UnimplementedARServiceServer) SetLocationWorldMap(context.Context, *SetLocationWorldMapRequest) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocationWorldMap not implemented")
}
func (*UnimplementedARServiceServer) GetListLocationWorldMap(context.Context, *BaseRequest) (*GetListLocationWorldMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLocationWorldMap not implemented")
}
func (*UnimplementedARServiceServer) DeleteLocationWorldMap(context.Context, *DeleteLocationWorldMapRequest) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocationWorldMap not implemented")
}
func (*UnimplementedARServiceServer) LoadWorld(context.Context, *LoadWorldRequest) (*LoadWorldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadWorld not implemented")
}
func (*UnimplementedARServiceServer) LoadTutorialWorld(context.Context, *BaseRequest) (*LoadWorldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTutorialWorld not implemented")
}
func (*UnimplementedARServiceServer) StreamMultipleLoadWorld(ARService_StreamMultipleLoadWorldServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMultipleLoadWorld not implemented")
}
func (*UnimplementedARServiceServer) HeathCheck(context.Context, *HealthCheckRequest) (*HeathCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeathCheck not implemented")
}
func (*UnimplementedARServiceServer) DeleteTestSession(context.Context, *DeleteTestSessionRequest) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestSession not implemented")
}

func RegisterARServiceServer(s *grpc.Server, srv ARServiceServer) {
	s.RegisterService(&_ARService_serviceDesc, srv)
}

func _ARService_CreateARPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateARPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).CreateARPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/CreateARPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).CreateARPost(ctx, req.(*CreateARPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_DeleteARPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteARPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).DeleteARPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/DeleteARPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).DeleteARPost(ctx, req.(*DeleteARPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_SetLocationWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocationWorldMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).SetLocationWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/SetLocationWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).SetLocationWorldMap(ctx, req.(*SetLocationWorldMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_GetListLocationWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).GetListLocationWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/GetListLocationWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).GetListLocationWorldMap(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_DeleteLocationWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationWorldMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).DeleteLocationWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/DeleteLocationWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).DeleteLocationWorldMap(ctx, req.(*DeleteLocationWorldMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_LoadWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).LoadWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/LoadWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).LoadWorld(ctx, req.(*LoadWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_LoadTutorialWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).LoadTutorialWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/LoadTutorialWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).LoadTutorialWorld(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_StreamMultipleLoadWorld_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ARServiceServer).StreamMultipleLoadWorld(&aRServiceStreamMultipleLoadWorldServer{stream})
}

type ARService_StreamMultipleLoadWorldServer interface {
	Send(*MultipleLoadWorldReply) error
	Recv() (*LoadWorldRequest, error)
	grpc.ServerStream
}

type aRServiceStreamMultipleLoadWorldServer struct {
	grpc.ServerStream
}

func (x *aRServiceStreamMultipleLoadWorldServer) Send(m *MultipleLoadWorldReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aRServiceStreamMultipleLoadWorldServer) Recv() (*LoadWorldRequest, error) {
	m := new(LoadWorldRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ARService_HeathCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).HeathCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/HeathCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).HeathCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ARService_DeleteTestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ARServiceServer).DeleteTestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ARService/DeleteTestSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ARServiceServer).DeleteTestSession(ctx, req.(*DeleteTestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ARService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.ARService",
	HandlerType: (*ARServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateARPost",
			Handler:    _ARService_CreateARPost_Handler,
		},
		{
			MethodName: "DeleteARPost",
			Handler:    _ARService_DeleteARPost_Handler,
		},
		{
			MethodName: "SetLocationWorldMap",
			Handler:    _ARService_SetLocationWorldMap_Handler,
		},
		{
			MethodName: "GetListLocationWorldMap",
			Handler:    _ARService_GetListLocationWorldMap_Handler,
		},
		{
			MethodName: "DeleteLocationWorldMap",
			Handler:    _ARService_DeleteLocationWorldMap_Handler,
		},
		{
			MethodName: "LoadWorld",
			Handler:    _ARService_LoadWorld_Handler,
		},
		{
			MethodName: "LoadTutorialWorld",
			Handler:    _ARService_LoadTutorialWorld_Handler,
		},
		{
			MethodName: "HeathCheck",
			Handler:    _ARService_HeathCheck_Handler,
		},
		{
			MethodName: "DeleteTestSession",
			Handler:    _ARService_DeleteTestSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMultipleLoadWorld",
			Handler:       _ARService_StreamMultipleLoadWorld_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxy.proto",
}

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	// Объединенные ин-аут методы
	InStream(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_InStreamClient, error)
	OutStream(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (TelemetryService_OutStreamClient, error)
	// Вызывай его, когда на клиенте сессия завершается
	Finalize(ctx context.Context, in *SessionFinalData, opts ...grpc.CallOption) (*BaseReply, error)
	GetActiveSessions(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*GetActiveSessionsReply, error)
	SaveTelemetryVideo(ctx context.Context, in *SaveVideoRequest, opts ...grpc.CallOption) (*BaseReply, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionReply, error)
	//клиент открывает канал и слушает позиционирование ("запросы" прилетают в рамках телеметрии в InStream)
	ListenPositions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TelemetryService_ListenPositionsClient, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HeathCheckReply, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) InStream(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_InStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[0], "/proxy.TelemetryService/InStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceInStreamClient{stream}
	return x, nil
}

type TelemetryService_InStreamClient interface {
	Send(*SessionStreamMessage) error
	CloseAndRecv() (*BaseReply, error)
	grpc.ClientStream
}

type telemetryServiceInStreamClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceInStreamClient) Send(m *SessionStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemetryServiceInStreamClient) CloseAndRecv() (*BaseReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BaseReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) OutStream(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (TelemetryService_OutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[1], "/proxy.TelemetryService/OutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceOutStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_OutStreamClient interface {
	Recv() (*SessionStreamMessage, error)
	grpc.ClientStream
}

type telemetryServiceOutStreamClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceOutStreamClient) Recv() (*SessionStreamMessage, error) {
	m := new(SessionStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) Finalize(ctx context.Context, in *SessionFinalData, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/proxy.TelemetryService/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetActiveSessions(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*GetActiveSessionsReply, error) {
	out := new(GetActiveSessionsReply)
	err := c.cc.Invoke(ctx, "/proxy.TelemetryService/GetActiveSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SaveTelemetryVideo(ctx context.Context, in *SaveVideoRequest, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/proxy.TelemetryService/SaveTelemetryVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionReply, error) {
	out := new(GetSessionReply)
	err := c.cc.Invoke(ctx, "/proxy.TelemetryService/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) ListenPositions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TelemetryService_ListenPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[2], "/proxy.TelemetryService/ListenPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceListenPositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_ListenPositionsClient interface {
	Recv() (*GetPositionReply, error)
	grpc.ClientStream
}

type telemetryServiceListenPositionsClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceListenPositionsClient) Recv() (*GetPositionReply, error) {
	m := new(GetPositionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HeathCheckReply, error) {
	out := new(HeathCheckReply)
	err := c.cc.Invoke(ctx, "/proxy.TelemetryService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
type TelemetryServiceServer interface {
	// Объединенные ин-аут методы
	InStream(TelemetryService_InStreamServer) error
	OutStream(*BaseRequest, TelemetryService_OutStreamServer) error
	// Вызывай его, когда на клиенте сессия завершается
	Finalize(context.Context, *SessionFinalData) (*BaseReply, error)
	GetActiveSessions(context.Context, *BaseRequest) (*GetActiveSessionsReply, error)
	SaveTelemetryVideo(context.Context, *SaveVideoRequest) (*BaseReply, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionReply, error)
	//клиент открывает канал и слушает позиционирование ("запросы" прилетают в рамках телеметрии в InStream)
	ListenPositions(*EmptyRequest, TelemetryService_ListenPositionsServer) error
	HealthCheck(context.Context, *HealthCheckRequest) (*HeathCheckReply, error)
}

// UnimplementedTelemetryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (*UnimplementedTelemetryServiceServer) InStream(TelemetryService_InStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InStream not implemented")
}
func (*UnimplementedTelemetryServiceServer) OutStream(*BaseRequest, TelemetryService_OutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OutStream not implemented")
}
func (*UnimplementedTelemetryServiceServer) Finalize(context.Context, *SessionFinalData) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (*UnimplementedTelemetryServiceServer) GetActiveSessions(context.Context, *BaseRequest) (*GetActiveSessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSessions not implemented")
}
func (*UnimplementedTelemetryServiceServer) SaveTelemetryVideo(context.Context, *SaveVideoRequest) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTelemetryVideo not implemented")
}
func (*UnimplementedTelemetryServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (*UnimplementedTelemetryServiceServer) ListenPositions(*EmptyRequest, TelemetryService_ListenPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenPositions not implemented")
}
func (*UnimplementedTelemetryServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HeathCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterTelemetryServiceServer(s *grpc.Server, srv TelemetryServiceServer) {
	s.RegisterService(&_TelemetryService_serviceDesc, srv)
}

func _TelemetryService_InStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryServiceServer).InStream(&telemetryServiceInStreamServer{stream})
}

type TelemetryService_InStreamServer interface {
	SendAndClose(*BaseReply) error
	Recv() (*SessionStreamMessage, error)
	grpc.ServerStream
}

type telemetryServiceInStreamServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceInStreamServer) SendAndClose(m *BaseReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemetryServiceInStreamServer) Recv() (*SessionStreamMessage, error) {
	m := new(SessionStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TelemetryService_OutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).OutStream(m, &telemetryServiceOutStreamServer{stream})
}

type TelemetryService_OutStreamServer interface {
	Send(*SessionStreamMessage) error
	grpc.ServerStream
}

type telemetryServiceOutStreamServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceOutStreamServer) Send(m *SessionStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionFinalData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TelemetryService/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).Finalize(ctx, req.(*SessionFinalData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetActiveSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetActiveSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TelemetryService/GetActiveSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetActiveSessions(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SaveTelemetryVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SaveTelemetryVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TelemetryService/SaveTelemetryVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SaveTelemetryVideo(ctx, req.(*SaveVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TelemetryService/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_ListenPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).ListenPositions(m, &telemetryServiceListenPositionsServer{stream})
}

type TelemetryService_ListenPositionsServer interface {
	Send(*GetPositionReply) error
	grpc.ServerStream
}

type telemetryServiceListenPositionsServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceListenPositionsServer) Send(m *GetPositionReply) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TelemetryService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelemetryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Finalize",
			Handler:    _TelemetryService_Finalize_Handler,
		},
		{
			MethodName: "GetActiveSessions",
			Handler:    _TelemetryService_GetActiveSessions_Handler,
		},
		{
			MethodName: "SaveTelemetryVideo",
			Handler:    _TelemetryService_SaveTelemetryVideo_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _TelemetryService_GetSession_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _TelemetryService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InStream",
			Handler:       _TelemetryService_InStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OutStream",
			Handler:       _TelemetryService_OutStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenPositions",
			Handler:       _TelemetryService_ListenPositions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
