// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: base_types.proto

package server

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EmptyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReply) Reset() {
	*x = EmptyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReply) ProtoMessage() {}

func (x *EmptyReply) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReply.ProtoReflect.Descriptor instead.
func (*EmptyReply) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{0}
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{1}
}

type MotionFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccelerationX float64 `protobuf:"fixed64,1,opt,name=acceleration_x,json=accelerationX,proto3" json:"acceleration_x,omitempty"`
	AccelerationY float64 `protobuf:"fixed64,2,opt,name=acceleration_y,json=accelerationY,proto3" json:"acceleration_y,omitempty"`
	AccelerationZ float64 `protobuf:"fixed64,3,opt,name=acceleration_z,json=accelerationZ,proto3" json:"acceleration_z,omitempty"`
	GyroX         float64 `protobuf:"fixed64,4,opt,name=gyro_x,json=gyroX,proto3" json:"gyro_x,omitempty"`
	GyroY         float64 `protobuf:"fixed64,5,opt,name=gyro_y,json=gyroY,proto3" json:"gyro_y,omitempty"`
	GyroZ         float64 `protobuf:"fixed64,6,opt,name=gyro_z,json=gyroZ,proto3" json:"gyro_z,omitempty"`
	MagnetometerX float64 `protobuf:"fixed64,7,opt,name=magnetometer_x,json=magnetometerX,proto3" json:"magnetometer_x,omitempty"`
	MagnetometerY float64 `protobuf:"fixed64,8,opt,name=magnetometer_y,json=magnetometerY,proto3" json:"magnetometer_y,omitempty"`
	MagnetometerZ float64 `protobuf:"fixed64,9,opt,name=magnetometer_z,json=magnetometerZ,proto3" json:"magnetometer_z,omitempty"`
	Timestamp     float64 `protobuf:"fixed64,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientTs      float64 `protobuf:"fixed64,11,opt,name=client_ts,json=clientTs,proto3" json:"client_ts,omitempty"` //client time
	ServerTs      float64 `protobuf:"fixed64,12,opt,name=server_ts,json=serverTs,proto3" json:"server_ts,omitempty"` //server time
	FrameIndex    uint32  `protobuf:"varint,13,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *MotionFrame) Reset() {
	*x = MotionFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionFrame) ProtoMessage() {}

func (x *MotionFrame) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionFrame.ProtoReflect.Descriptor instead.
func (*MotionFrame) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{2}
}

func (x *MotionFrame) GetAccelerationX() float64 {
	if x != nil {
		return x.AccelerationX
	}
	return 0
}

func (x *MotionFrame) GetAccelerationY() float64 {
	if x != nil {
		return x.AccelerationY
	}
	return 0
}

func (x *MotionFrame) GetAccelerationZ() float64 {
	if x != nil {
		return x.AccelerationZ
	}
	return 0
}

func (x *MotionFrame) GetGyroX() float64 {
	if x != nil {
		return x.GyroX
	}
	return 0
}

func (x *MotionFrame) GetGyroY() float64 {
	if x != nil {
		return x.GyroY
	}
	return 0
}

func (x *MotionFrame) GetGyroZ() float64 {
	if x != nil {
		return x.GyroZ
	}
	return 0
}

func (x *MotionFrame) GetMagnetometerX() float64 {
	if x != nil {
		return x.MagnetometerX
	}
	return 0
}

func (x *MotionFrame) GetMagnetometerY() float64 {
	if x != nil {
		return x.MagnetometerY
	}
	return 0
}

func (x *MotionFrame) GetMagnetometerZ() float64 {
	if x != nil {
		return x.MagnetometerZ
	}
	return 0
}

func (x *MotionFrame) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MotionFrame) GetClientTs() float64 {
	if x != nil {
		return x.ClientTs
	}
	return 0
}

func (x *MotionFrame) GetServerTs() float64 {
	if x != nil {
		return x.ServerTs
	}
	return 0
}

func (x *MotionFrame) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type HardwareFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTs             float64 `protobuf:"fixed64,1,opt,name=client_ts,json=clientTs,proto3" json:"client_ts,omitempty"`
	ServerTs             float64 `protobuf:"fixed64,2,opt,name=server_ts,json=serverTs,proto3" json:"server_ts,omitempty"`
	CpuUsage             float64 `protobuf:"fixed64,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                                       // in percents
	RamUsage             int64   `protobuf:"varint,4,opt,name=ram_usage,json=ramUsage,proto3" json:"ram_usage,omitempty"`                                        // in bytes
	BatteryLevel         float64 `protobuf:"fixed64,5,opt,name=battery_level,json=batteryLevel,proto3" json:"battery_level,omitempty"`                           // in percents
	AmbientLightingLumen float64 `protobuf:"fixed64,6,opt,name=ambient_lighting_lumen,json=ambientLightingLumen,proto3" json:"ambient_lighting_lumen,omitempty"` // in lumens
	AmbientLightingLux   float64 `protobuf:"fixed64,7,opt,name=ambient_lighting_lux,json=ambientLightingLux,proto3" json:"ambient_lighting_lux,omitempty"`       // in lux
	FrameIndex           uint32  `protobuf:"varint,8,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *HardwareFrame) Reset() {
	*x = HardwareFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareFrame) ProtoMessage() {}

func (x *HardwareFrame) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareFrame.ProtoReflect.Descriptor instead.
func (*HardwareFrame) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{3}
}

func (x *HardwareFrame) GetClientTs() float64 {
	if x != nil {
		return x.ClientTs
	}
	return 0
}

func (x *HardwareFrame) GetServerTs() float64 {
	if x != nil {
		return x.ServerTs
	}
	return 0
}

func (x *HardwareFrame) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *HardwareFrame) GetRamUsage() int64 {
	if x != nil {
		return x.RamUsage
	}
	return 0
}

func (x *HardwareFrame) GetBatteryLevel() float64 {
	if x != nil {
		return x.BatteryLevel
	}
	return 0
}

func (x *HardwareFrame) GetAmbientLightingLumen() float64 {
	if x != nil {
		return x.AmbientLightingLumen
	}
	return 0
}

func (x *HardwareFrame) GetAmbientLightingLux() float64 {
	if x != nil {
		return x.AmbientLightingLux
	}
	return 0
}

func (x *HardwareFrame) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type Matrix4X4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M []float32 `protobuf:"fixed32,1,rep,packed,name=m,proto3" json:"m,omitempty"` // [(validate.rules).repeated.len_items = 16];
}

func (x *Matrix4X4) Reset() {
	*x = Matrix4X4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matrix4X4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matrix4X4) ProtoMessage() {}

func (x *Matrix4X4) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matrix4X4.ProtoReflect.Descriptor instead.
func (*Matrix4X4) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{4}
}

func (x *Matrix4X4) GetM() []float32 {
	if x != nil {
		return x.M
	}
	return nil
}

type Matrix3X3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M []float32 `protobuf:"fixed32,1,rep,packed,name=m,proto3" json:"m,omitempty"` // [(validate.rules).repeated.len_items = 9];
}

func (x *Matrix3X3) Reset() {
	*x = Matrix3X3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matrix3X3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matrix3X3) ProtoMessage() {}

func (x *Matrix3X3) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matrix3X3.ProtoReflect.Descriptor instead.
func (*Matrix3X3) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{5}
}

func (x *Matrix3X3) GetM() []float32 {
	if x != nil {
		return x.M
	}
	return nil
}

type AssetForDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageData           []byte     `protobuf:"bytes,1,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	ImageUrl            string     `protobuf:"bytes,12,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImagePhysicalWidth  float32    `protobuf:"fixed32,2,opt,name=image_physical_width,json=imagePhysicalWidth,proto3" json:"image_physical_width,omitempty"`
	ImagePhysicalHeight float32    `protobuf:"fixed32,3,opt,name=image_physical_height,json=imagePhysicalHeight,proto3" json:"image_physical_height,omitempty"`
	CameraTransform     *Matrix4X4 `protobuf:"bytes,4,opt,name=camera_transform,json=cameraTransform,proto3" json:"camera_transform,omitempty"` // 16 items
	// VectorFloat3 hit_point = 5; // DEPRECATED
	// VectorFloat3 hit_normal = 6; // 3 items, x y z
	// Matrix4x4 banner_transform = 7; // 16 items
	AssetId     string          `protobuf:"bytes,8,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Coordinates *GpsCoordinates `protobuf:"bytes,9,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	Timestamp   float64         `protobuf:"fixed64,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Android-specific fields
	AndroidPose             *AndroidPose `protobuf:"bytes,11,opt,name=android_pose,json=androidPose,proto3" json:"android_pose,omitempty"`
	SessionToAssetTransform *Matrix4X4   `protobuf:"bytes,13,opt,name=session_to_asset_transform,json=sessionToAssetTransform,proto3" json:"session_to_asset_transform,omitempty"` // banner_transform + hit_point при сохранении
}

func (x *AssetForDetection) Reset() {
	*x = AssetForDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetForDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetForDetection) ProtoMessage() {}

func (x *AssetForDetection) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetForDetection.ProtoReflect.Descriptor instead.
func (*AssetForDetection) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{6}
}

func (x *AssetForDetection) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *AssetForDetection) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *AssetForDetection) GetImagePhysicalWidth() float32 {
	if x != nil {
		return x.ImagePhysicalWidth
	}
	return 0
}

func (x *AssetForDetection) GetImagePhysicalHeight() float32 {
	if x != nil {
		return x.ImagePhysicalHeight
	}
	return 0
}

func (x *AssetForDetection) GetCameraTransform() *Matrix4X4 {
	if x != nil {
		return x.CameraTransform
	}
	return nil
}

func (x *AssetForDetection) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AssetForDetection) GetCoordinates() *GpsCoordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *AssetForDetection) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AssetForDetection) GetAndroidPose() *AndroidPose {
	if x != nil {
		return x.AndroidPose
	}
	return nil
}

func (x *AssetForDetection) GetSessionToAssetTransform() *Matrix4X4 {
	if x != nil {
		return x.SessionToAssetTransform
	}
	return nil
}

type Anchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix *Matrix4X4 `protobuf:"bytes,1,opt,name=matrix,proto3" json:"matrix,omitempty"` // 16 items
	Id     string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Anchor) Reset() {
	*x = Anchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anchor) ProtoMessage() {}

func (x *Anchor) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anchor.ProtoReflect.Descriptor instead.
func (*Anchor) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{7}
}

func (x *Anchor) GetMatrix() *Matrix4X4 {
	if x != nil {
		return x.Matrix
	}
	return nil
}

func (x *Anchor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DetectedAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId         string     `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Anchor          *Anchor    `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Timestamp       float64    `protobuf:"fixed64,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  //deprecated
	CameraTransform *Matrix4X4 `protobuf:"bytes,4,opt,name=camera_transform,json=cameraTransform,proto3" json:"camera_transform,omitempty"` // 16 items
	// Android-specific fields
	AndroidExtentXz *VectorFloat2 `protobuf:"bytes,5,opt,name=android_extent_xz,json=androidExtentXz,proto3" json:"android_extent_xz,omitempty"`
	Anchors         []*Anchor     `protobuf:"bytes,6,rep,name=anchors,proto3" json:"anchors,omitempty"`
	AndroidPose     *AndroidPose  `protobuf:"bytes,7,opt,name=android_pose,json=androidPose,proto3" json:"android_pose,omitempty"`
	ClientTs        float64       `protobuf:"fixed64,8,opt,name=client_ts,json=clientTs,proto3" json:"client_ts,omitempty"`
	ServerTs        float64       `protobuf:"fixed64,9,opt,name=server_ts,json=serverTs,proto3" json:"server_ts,omitempty"`
	FrameIndex      uint32        `protobuf:"varint,10,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *DetectedAsset) Reset() {
	*x = DetectedAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedAsset) ProtoMessage() {}

func (x *DetectedAsset) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedAsset.ProtoReflect.Descriptor instead.
func (*DetectedAsset) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{8}
}

func (x *DetectedAsset) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *DetectedAsset) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *DetectedAsset) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DetectedAsset) GetCameraTransform() *Matrix4X4 {
	if x != nil {
		return x.CameraTransform
	}
	return nil
}

func (x *DetectedAsset) GetAndroidExtentXz() *VectorFloat2 {
	if x != nil {
		return x.AndroidExtentXz
	}
	return nil
}

func (x *DetectedAsset) GetAnchors() []*Anchor {
	if x != nil {
		return x.Anchors
	}
	return nil
}

func (x *DetectedAsset) GetAndroidPose() *AndroidPose {
	if x != nil {
		return x.AndroidPose
	}
	return nil
}

func (x *DetectedAsset) GetClientTs() float64 {
	if x != nil {
		return x.ClientTs
	}
	return 0
}

func (x *DetectedAsset) GetServerTs() float64 {
	if x != nil {
		return x.ServerTs
	}
	return 0
}

func (x *DetectedAsset) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type GpsCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude           float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude           float64 `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	HorizontalAccuracy float64 `protobuf:"fixed64,4,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3" json:"horizontal_accuracy,omitempty"`
	VerticalAccuracy   float64 `protobuf:"fixed64,5,opt,name=vertical_accuracy,json=verticalAccuracy,proto3" json:"vertical_accuracy,omitempty"`
}

func (x *GpsCoordinates) Reset() {
	*x = GpsCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsCoordinates) ProtoMessage() {}

func (x *GpsCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsCoordinates.ProtoReflect.Descriptor instead.
func (*GpsCoordinates) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{9}
}

func (x *GpsCoordinates) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GpsCoordinates) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GpsCoordinates) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GpsCoordinates) GetHorizontalAccuracy() float64 {
	if x != nil {
		return x.HorizontalAccuracy
	}
	return 0
}

func (x *GpsCoordinates) GetVerticalAccuracy() float64 {
	if x != nil {
		return x.VerticalAccuracy
	}
	return 0
}

type VectorFloat4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W float32 `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
}

func (x *VectorFloat4) Reset() {
	*x = VectorFloat4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFloat4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFloat4) ProtoMessage() {}

func (x *VectorFloat4) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFloat4.ProtoReflect.Descriptor instead.
func (*VectorFloat4) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{10}
}

func (x *VectorFloat4) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorFloat4) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *VectorFloat4) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *VectorFloat4) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

type VectorFloat3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *VectorFloat3) Reset() {
	*x = VectorFloat3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFloat3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFloat3) ProtoMessage() {}

func (x *VectorFloat3) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFloat3.ProtoReflect.Descriptor instead.
func (*VectorFloat3) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{11}
}

func (x *VectorFloat3) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorFloat3) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *VectorFloat3) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type VectorFloat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *VectorFloat2) Reset() {
	*x = VectorFloat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFloat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFloat2) ProtoMessage() {}

func (x *VectorFloat2) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFloat2.ProtoReflect.Descriptor instead.
func (*VectorFloat2) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{12}
}

func (x *VectorFloat2) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorFloat2) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type RgbColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R float32 `protobuf:"fixed32,1,opt,name=r,proto3" json:"r,omitempty"` // 0 <= x <= 1
	G float32 `protobuf:"fixed32,2,opt,name=g,proto3" json:"g,omitempty"`
	B float32 `protobuf:"fixed32,3,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *RgbColor) Reset() {
	*x = RgbColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RgbColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbColor) ProtoMessage() {}

func (x *RgbColor) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbColor.ProtoReflect.Descriptor instead.
func (*RgbColor) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{13}
}

func (x *RgbColor) GetR() float32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *RgbColor) GetG() float32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *RgbColor) GetB() float32 {
	if x != nil {
		return x.B
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos   *VectorFloat3 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Color *RgbColor     `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{14}
}

func (x *Point) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Point) GetPos() *VectorFloat3 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Point) GetColor() *RgbColor {
	if x != nil {
		return x.Color
	}
	return nil
}

type PointsCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Centre      *VectorFloat3 `protobuf:"bytes,1,opt,name=centre,proto3" json:"centre,omitempty"`
	Size        *VectorFloat3 `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	PointsCount uint32        `protobuf:"varint,3,opt,name=points_count,json=pointsCount,proto3" json:"points_count,omitempty"`
	Points      []*Point      `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PointsCloud) Reset() {
	*x = PointsCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsCloud) ProtoMessage() {}

func (x *PointsCloud) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsCloud.ProtoReflect.Descriptor instead.
func (*PointsCloud) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{15}
}

func (x *PointsCloud) GetCentre() *VectorFloat3 {
	if x != nil {
		return x.Centre
	}
	return nil
}

func (x *PointsCloud) GetSize() *VectorFloat3 {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *PointsCloud) GetPointsCount() uint32 {
	if x != nil {
		return x.PointsCount
	}
	return 0
}

func (x *PointsCloud) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type ARSessionFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointsCloud *PointsCloud `protobuf:"bytes,1,opt,name=points_cloud,json=pointsCloud,proto3" json:"points_cloud,omitempty"`
	Anchors     []*Anchor    `protobuf:"bytes,2,rep,name=anchors,proto3" json:"anchors,omitempty"`
}

func (x *ARSessionFrame) Reset() {
	*x = ARSessionFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ARSessionFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ARSessionFrame) ProtoMessage() {}

func (x *ARSessionFrame) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ARSessionFrame.ProtoReflect.Descriptor instead.
func (*ARSessionFrame) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{16}
}

func (x *ARSessionFrame) GetPointsCloud() *PointsCloud {
	if x != nil {
		return x.PointsCloud
	}
	return nil
}

func (x *ARSessionFrame) GetAnchors() []*Anchor {
	if x != nil {
		return x.Anchors
	}
	return nil
}

type KeyPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos         *VectorFloat2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Radius      float32       `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
	Orientation float32       `protobuf:"fixed32,3,opt,name=orientation,proto3" json:"orientation,omitempty"`
	Response    float32       `protobuf:"fixed32,4,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *KeyPoint) Reset() {
	*x = KeyPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPoint) ProtoMessage() {}

func (x *KeyPoint) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPoint.ProtoReflect.Descriptor instead.
func (*KeyPoint) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{17}
}

func (x *KeyPoint) GetPos() *VectorFloat2 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *KeyPoint) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *KeyPoint) GetOrientation() float32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *KeyPoint) GetResponse() float32 {
	if x != nil {
		return x.Response
	}
	return 0
}

type OrbFeaturePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyPoint      *KeyPoint `protobuf:"bytes,1,opt,name=key_point,json=keyPoint,proto3" json:"key_point,omitempty"`
	OrbDescriptor []byte    `protobuf:"bytes,2,opt,name=orb_descriptor,json=orbDescriptor,proto3" json:"orb_descriptor,omitempty"`
}

func (x *OrbFeaturePoint) Reset() {
	*x = OrbFeaturePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrbFeaturePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbFeaturePoint) ProtoMessage() {}

func (x *OrbFeaturePoint) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbFeaturePoint.ProtoReflect.Descriptor instead.
func (*OrbFeaturePoint) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{18}
}

func (x *OrbFeaturePoint) GetKeyPoint() *KeyPoint {
	if x != nil {
		return x.KeyPoint
	}
	return nil
}

func (x *OrbFeaturePoint) GetOrbDescriptor() []byte {
	if x != nil {
		return x.OrbDescriptor
	}
	return nil
}

type FeaturePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FeaturePoint:
	//	*FeaturePoint_Orb
	FeaturePoint isFeaturePoint_FeaturePoint `protobuf_oneof:"feature_point"`
}

func (x *FeaturePoint) Reset() {
	*x = FeaturePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturePoint) ProtoMessage() {}

func (x *FeaturePoint) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturePoint.ProtoReflect.Descriptor instead.
func (*FeaturePoint) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{19}
}

func (m *FeaturePoint) GetFeaturePoint() isFeaturePoint_FeaturePoint {
	if m != nil {
		return m.FeaturePoint
	}
	return nil
}

func (x *FeaturePoint) GetOrb() *OrbFeaturePoint {
	if x, ok := x.GetFeaturePoint().(*FeaturePoint_Orb); ok {
		return x.Orb
	}
	return nil
}

type isFeaturePoint_FeaturePoint interface {
	isFeaturePoint_FeaturePoint()
}

type FeaturePoint_Orb struct {
	Orb *OrbFeaturePoint `protobuf:"bytes,1,opt,name=orb,proto3,oneof"`
}

func (*FeaturePoint_Orb) isFeaturePoint_FeaturePoint() {}

type DataFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArSessionFrame *ARSessionFrame `protobuf:"bytes,1,opt,name=ar_session_frame,json=arSessionFrame,proto3" json:"ar_session_frame,omitempty"` // without centre and size
	Timestamp      float64         `protobuf:"fixed64,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                 //deprecated
	//device position
	CameraTransform  *Matrix4X4         `protobuf:"bytes,3,opt,name=camera_transform,json=cameraTransform,proto3" json:"camera_transform,omitempty"` // 16 items
	Gps              *GpsCoordinates    `protobuf:"bytes,4,opt,name=gps,proto3" json:"gps,omitempty"`
	ClientTs         float64            `protobuf:"fixed64,5,opt,name=client_ts,json=clientTs,proto3" json:"client_ts,omitempty"`
	ServerTs         float64            `protobuf:"fixed64,6,opt,name=server_ts,json=serverTs,proto3" json:"server_ts,omitempty"`
	FrameIndex       uint32             `protobuf:"varint,7,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
	OrbFeaturePoints []*OrbFeaturePoint `protobuf:"bytes,8,rep,name=orb_feature_points,json=orbFeaturePoints,proto3" json:"orb_feature_points,omitempty"`
	PngFrame         []byte             `protobuf:"bytes,9,opt,name=png_frame,json=pngFrame,proto3" json:"png_frame,omitempty"`
	LzmaFrame        []byte             `protobuf:"bytes,10,opt,name=lzma_frame,json=lzmaFrame,proto3" json:"lzma_frame,omitempty"` //TODO move feature points into Frame structure
}

func (x *DataFrame) Reset() {
	*x = DataFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrame) ProtoMessage() {}

func (x *DataFrame) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrame.ProtoReflect.Descriptor instead.
func (*DataFrame) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{20}
}

func (x *DataFrame) GetArSessionFrame() *ARSessionFrame {
	if x != nil {
		return x.ArSessionFrame
	}
	return nil
}

func (x *DataFrame) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataFrame) GetCameraTransform() *Matrix4X4 {
	if x != nil {
		return x.CameraTransform
	}
	return nil
}

func (x *DataFrame) GetGps() *GpsCoordinates {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *DataFrame) GetClientTs() float64 {
	if x != nil {
		return x.ClientTs
	}
	return 0
}

func (x *DataFrame) GetServerTs() float64 {
	if x != nil {
		return x.ServerTs
	}
	return 0
}

func (x *DataFrame) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *DataFrame) GetOrbFeaturePoints() []*OrbFeaturePoint {
	if x != nil {
		return x.OrbFeaturePoints
	}
	return nil
}

func (x *DataFrame) GetPngFrame() []byte {
	if x != nil {
		return x.PngFrame
	}
	return nil
}

func (x *DataFrame) GetLzmaFrame() []byte {
	if x != nil {
		return x.LzmaFrame
	}
	return nil
}

type Plane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertices           []*VectorFloat3 `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	TextureCoordinates []*VectorFloat2 `protobuf:"bytes,2,rep,name=texture_coordinates,json=textureCoordinates,proto3" json:"texture_coordinates,omitempty"`
	TriangleCount      uint32          `protobuf:"varint,3,opt,name=triangle_count,json=triangleCount,proto3" json:"triangle_count,omitempty"`
	TriangleIndices    []uint32        `protobuf:"varint,4,rep,packed,name=triangle_indices,json=triangleIndices,proto3" json:"triangle_indices,omitempty"`
	BoundaryVertices   []*VectorFloat3 `protobuf:"bytes,5,rep,name=boundary_vertices,json=boundaryVertices,proto3" json:"boundary_vertices,omitempty"`
	IsVertical         bool            `protobuf:"varint,6,opt,name=is_vertical,json=isVertical,proto3" json:"is_vertical,omitempty"`
	Anchor             *Anchor         `protobuf:"bytes,7,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Id                 string          `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp          float64         `protobuf:"fixed64,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //deprecated
	// Android-specific fields
	AndroidVertices []*VectorFloat2 `protobuf:"bytes,10,rep,name=android_vertices,json=androidVertices,proto3" json:"android_vertices,omitempty"` //polygon
	AndroidExtentXz *VectorFloat2   `protobuf:"bytes,11,opt,name=android_extent_xz,json=androidExtentXz,proto3" json:"android_extent_xz,omitempty"`
	Anchors         []*Anchor       `protobuf:"bytes,12,rep,name=anchors,proto3" json:"anchors,omitempty"`
	AndroidPose     *AndroidPose    `protobuf:"bytes,13,opt,name=android_pose,json=androidPose,proto3" json:"android_pose,omitempty"`
	ClientTs        float64         `protobuf:"fixed64,14,opt,name=client_ts,json=clientTs,proto3" json:"client_ts,omitempty"`
	ServerTs        float64         `protobuf:"fixed64,15,opt,name=server_ts,json=serverTs,proto3" json:"server_ts,omitempty"`
	FrameIndex      uint32          `protobuf:"varint,16,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"`
}

func (x *Plane) Reset() {
	*x = Plane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plane) ProtoMessage() {}

func (x *Plane) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plane.ProtoReflect.Descriptor instead.
func (*Plane) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{21}
}

func (x *Plane) GetVertices() []*VectorFloat3 {
	if x != nil {
		return x.Vertices
	}
	return nil
}

func (x *Plane) GetTextureCoordinates() []*VectorFloat2 {
	if x != nil {
		return x.TextureCoordinates
	}
	return nil
}

func (x *Plane) GetTriangleCount() uint32 {
	if x != nil {
		return x.TriangleCount
	}
	return 0
}

func (x *Plane) GetTriangleIndices() []uint32 {
	if x != nil {
		return x.TriangleIndices
	}
	return nil
}

func (x *Plane) GetBoundaryVertices() []*VectorFloat3 {
	if x != nil {
		return x.BoundaryVertices
	}
	return nil
}

func (x *Plane) GetIsVertical() bool {
	if x != nil {
		return x.IsVertical
	}
	return false
}

func (x *Plane) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *Plane) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plane) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Plane) GetAndroidVertices() []*VectorFloat2 {
	if x != nil {
		return x.AndroidVertices
	}
	return nil
}

func (x *Plane) GetAndroidExtentXz() *VectorFloat2 {
	if x != nil {
		return x.AndroidExtentXz
	}
	return nil
}

func (x *Plane) GetAnchors() []*Anchor {
	if x != nil {
		return x.Anchors
	}
	return nil
}

func (x *Plane) GetAndroidPose() *AndroidPose {
	if x != nil {
		return x.AndroidPose
	}
	return nil
}

func (x *Plane) GetClientTs() float64 {
	if x != nil {
		return x.ClientTs
	}
	return 0
}

func (x *Plane) GetServerTs() float64 {
	if x != nil {
		return x.ServerTs
	}
	return 0
}

func (x *Plane) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type AndroidPose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndroidTranslation *VectorFloat3 `protobuf:"bytes,1,opt,name=android_translation,json=androidTranslation,proto3" json:"android_translation,omitempty"`
	AndroidQuaternion  *VectorFloat4 `protobuf:"bytes,2,opt,name=android_quaternion,json=androidQuaternion,proto3" json:"android_quaternion,omitempty"`
}

func (x *AndroidPose) Reset() {
	*x = AndroidPose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPose) ProtoMessage() {}

func (x *AndroidPose) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPose.ProtoReflect.Descriptor instead.
func (*AndroidPose) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{22}
}

func (x *AndroidPose) GetAndroidTranslation() *VectorFloat3 {
	if x != nil {
		return x.AndroidTranslation
	}
	return nil
}

func (x *AndroidPose) GetAndroidQuaternion() *VectorFloat4 {
	if x != nil {
		return x.AndroidQuaternion
	}
	return nil
}

type ActiveSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ActiveSession) Reset() {
	*x = ActiveSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveSession) ProtoMessage() {}

func (x *ActiveSession) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveSession.ProtoReflect.Descriptor instead.
func (*ActiveSession) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{23}
}

func (x *ActiveSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ActiveSession) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// common types for photo/video/audio objects in chat and post
type RichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *RichText) Reset() {
	*x = RichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichText) ProtoMessage() {}

func (x *RichText) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichText.ProtoReflect.Descriptor instead.
func (*RichText) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{24}
}

func (x *RichText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{25}
}

func (x *Audio) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width      int32             `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height     int32             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Thumbnails map[string]string `protobuf:"bytes,4,rep,name=thumbnails,proto3" json:"thumbnails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key is x/y-size like `1920x1080` or `128x128`, value is thumb url
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{26}
}

func (x *Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Photo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Photo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Photo) GetThumbnails() map[string]string {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width      int32             `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height     int32             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Fps        float64           `protobuf:"fixed64,4,opt,name=fps,proto3" json:"fps,omitempty"`
	Thumbnails map[string]string `protobuf:"bytes,5,rep,name=thumbnails,proto3" json:"thumbnails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key is x/y-size like `1920x1080` or `128x128`, value is thumb url
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{27}
}

func (x *Video) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Video) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Video) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Video) GetFps() float64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *Video) GetThumbnails() map[string]string {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type Model3D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url          string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name         string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PreviewUrl   string  `protobuf:"bytes,4,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
	UploadTs     float64 `protobuf:"fixed64,5,opt,name=upload_ts,json=uploadTs,proto3" json:"upload_ts,omitempty"`
	CategoryName string  `protobuf:"bytes,6,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *Model3D) Reset() {
	*x = Model3D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model3D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model3D) ProtoMessage() {}

func (x *Model3D) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model3D.ProtoReflect.Descriptor instead.
func (*Model3D) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{28}
}

func (x *Model3D) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model3D) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Model3D) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model3D) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *Model3D) GetUploadTs() float64 {
	if x != nil {
		return x.UploadTs
	}
	return 0
}

func (x *Model3D) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"` //if true - return extended info
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{29}
}

func (x *HealthCheckRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type HeathCheckReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        bool              `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` //true if all is ok
	Results       map[string]bool   `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ResultDetails map[string]string `protobuf:"bytes,3,rep,name=result_details,json=resultDetails,proto3" json:"result_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HeathCheckReply) Reset() {
	*x = HeathCheckReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeathCheckReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeathCheckReply) ProtoMessage() {}

func (x *HeathCheckReply) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeathCheckReply.ProtoReflect.Descriptor instead.
func (*HeathCheckReply) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{30}
}

func (x *HeathCheckReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *HeathCheckReply) GetResults() map[string]bool {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HeathCheckReply) GetResultDetails() map[string]string {
	if x != nil {
		return x.ResultDetails
	}
	return nil
}

type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinPoint *GpsCoordinates `protobuf:"bytes,1,opt,name=min_point,json=minPoint,proto3" json:"min_point,omitempty"`
	MaxPoint *GpsCoordinates `protobuf:"bytes,2,opt,name=max_point,json=maxPoint,proto3" json:"max_point,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{31}
}

func (x *BoundingBox) GetMinPoint() *GpsCoordinates {
	if x != nil {
		return x.MinPoint
	}
	return nil
}

func (x *BoundingBox) GetMaxPoint() *GpsCoordinates {
	if x != nil {
		return x.MaxPoint
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndex uint32     `protobuf:"varint,1,opt,name=frame_index,json=frameIndex,proto3" json:"frame_index,omitempty"` //DataFrame index
	Transform  *Matrix4X4 `protobuf:"bytes,2,opt,name=transform,proto3" json:"transform,omitempty"`
	SessionId  string     `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_base_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_base_types_proto_rawDescGZIP(), []int{32}
}

func (x *Position) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *Position) GetTransform() *Matrix4X4 {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *Position) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

var File_base_types_proto protoreflect.FileDescriptor

var file_base_types_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x0c,
	0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x0a, 0x0c,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb5, 0x03, 0x0a,
	0x0b, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5a, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72, 0x6f,
	0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x59, 0x12,
	0x15, 0x0a, 0x06, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x67, 0x79, 0x72, 0x6f, 0x5a, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x58, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x59, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61,
	0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5a, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x75, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x75, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x19, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x34, 0x78, 0x34, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x01, 0x6d, 0x22, 0x19, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x78, 0x33,
	0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x01, 0x6d, 0x22, 0xfe,
	0x03, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x34, 0x78, 0x34, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3a, 0x0a, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0b,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x34, 0x78, 0x34, 0x52, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22,
	0x47, 0x0a, 0x06, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x34, 0x78, 0x34,
	0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x40, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x34, 0x78, 0x34,
	0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x78, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x7a, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc4, 0x01, 0x0a,
	0x0e, 0x47, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x22, 0x46, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x34, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a,
	0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0x38, 0x0a, 0x0c, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x2a, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x22, 0x34, 0x0a, 0x08, 0x52, 0x67, 0x62, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x62, 0x22, 0x6f, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x67, 0x62, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x0e, 0x41, 0x52, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6b, 0x0a, 0x0f, 0x4f, 0x72, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x62, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6f, 0x72, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x50,
	0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x03, 0x6f, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x62, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x72, 0x62, 0x42,
	0x0f, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xc1, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x10, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x52, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x61, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x34, 0x78, 0x34, 0x52, 0x0f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47,
	0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x03, 0x67,
	0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a,
	0x12, 0x6f, 0x72, 0x62, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x6f, 0x72, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6e, 0x67, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6e, 0x67,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x7a, 0x6d, 0x61, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x7a, 0x6d, 0x61, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x22, 0xec, 0x05, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x52, 0x12, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x52, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x7a, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x52, 0x0f, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x7a, 0x12, 0x2c,
	0x0a, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50,
	0x6f, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x52, 0x12, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72,
	0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x34, 0x52, 0x11, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x51, 0x75, 0x61,
	0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x19, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc9,
	0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x05, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x33, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a,
	0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xc2, 0x02, 0x0a, 0x0f, 0x48, 0x65,
	0x61, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x65, 0x61, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f,
	0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x37, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x70,
	0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x7f, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x34, 0x78, 0x34, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x42, 0x09, 0x5a, 0x07, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_base_types_proto_rawDescOnce sync.Once
	file_base_types_proto_rawDescData = file_base_types_proto_rawDesc
)

func file_base_types_proto_rawDescGZIP() []byte {
	file_base_types_proto_rawDescOnce.Do(func() {
		file_base_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_types_proto_rawDescData)
	})
	return file_base_types_proto_rawDescData
}

var file_base_types_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_base_types_proto_goTypes = []interface{}{
	(*EmptyReply)(nil),         // 0: base_types.EmptyReply
	(*EmptyRequest)(nil),       // 1: base_types.EmptyRequest
	(*MotionFrame)(nil),        // 2: base_types.MotionFrame
	(*HardwareFrame)(nil),      // 3: base_types.HardwareFrame
	(*Matrix4X4)(nil),          // 4: base_types.Matrix4x4
	(*Matrix3X3)(nil),          // 5: base_types.Matrix3x3
	(*AssetForDetection)(nil),  // 6: base_types.AssetForDetection
	(*Anchor)(nil),             // 7: base_types.Anchor
	(*DetectedAsset)(nil),      // 8: base_types.DetectedAsset
	(*GpsCoordinates)(nil),     // 9: base_types.GpsCoordinates
	(*VectorFloat4)(nil),       // 10: base_types.VectorFloat4
	(*VectorFloat3)(nil),       // 11: base_types.VectorFloat3
	(*VectorFloat2)(nil),       // 12: base_types.VectorFloat2
	(*RgbColor)(nil),           // 13: base_types.RgbColor
	(*Point)(nil),              // 14: base_types.Point
	(*PointsCloud)(nil),        // 15: base_types.PointsCloud
	(*ARSessionFrame)(nil),     // 16: base_types.ARSessionFrame
	(*KeyPoint)(nil),           // 17: base_types.KeyPoint
	(*OrbFeaturePoint)(nil),    // 18: base_types.OrbFeaturePoint
	(*FeaturePoint)(nil),       // 19: base_types.FeaturePoint
	(*DataFrame)(nil),          // 20: base_types.DataFrame
	(*Plane)(nil),              // 21: base_types.Plane
	(*AndroidPose)(nil),        // 22: base_types.AndroidPose
	(*ActiveSession)(nil),      // 23: base_types.ActiveSession
	(*RichText)(nil),           // 24: base_types.RichText
	(*Audio)(nil),              // 25: base_types.Audio
	(*Photo)(nil),              // 26: base_types.Photo
	(*Video)(nil),              // 27: base_types.Video
	(*Model3D)(nil),            // 28: base_types.Model3d
	(*HealthCheckRequest)(nil), // 29: base_types.HealthCheckRequest
	(*HeathCheckReply)(nil),    // 30: base_types.HeathCheckReply
	(*BoundingBox)(nil),        // 31: base_types.BoundingBox
	(*Position)(nil),           // 32: base_types.Position
	nil,                        // 33: base_types.Photo.ThumbnailsEntry
	nil,                        // 34: base_types.Video.ThumbnailsEntry
	nil,                        // 35: base_types.HeathCheckReply.ResultsEntry
	nil,                        // 36: base_types.HeathCheckReply.ResultDetailsEntry
}
var file_base_types_proto_depIdxs = []int32{
	4,  // 0: base_types.AssetForDetection.camera_transform:type_name -> base_types.Matrix4x4
	9,  // 1: base_types.AssetForDetection.coordinates:type_name -> base_types.GpsCoordinates
	22, // 2: base_types.AssetForDetection.android_pose:type_name -> base_types.AndroidPose
	4,  // 3: base_types.AssetForDetection.session_to_asset_transform:type_name -> base_types.Matrix4x4
	4,  // 4: base_types.Anchor.matrix:type_name -> base_types.Matrix4x4
	7,  // 5: base_types.DetectedAsset.anchor:type_name -> base_types.Anchor
	4,  // 6: base_types.DetectedAsset.camera_transform:type_name -> base_types.Matrix4x4
	12, // 7: base_types.DetectedAsset.android_extent_xz:type_name -> base_types.VectorFloat2
	7,  // 8: base_types.DetectedAsset.anchors:type_name -> base_types.Anchor
	22, // 9: base_types.DetectedAsset.android_pose:type_name -> base_types.AndroidPose
	11, // 10: base_types.Point.pos:type_name -> base_types.VectorFloat3
	13, // 11: base_types.Point.color:type_name -> base_types.RgbColor
	11, // 12: base_types.PointsCloud.centre:type_name -> base_types.VectorFloat3
	11, // 13: base_types.PointsCloud.size:type_name -> base_types.VectorFloat3
	14, // 14: base_types.PointsCloud.points:type_name -> base_types.Point
	15, // 15: base_types.ARSessionFrame.points_cloud:type_name -> base_types.PointsCloud
	7,  // 16: base_types.ARSessionFrame.anchors:type_name -> base_types.Anchor
	12, // 17: base_types.KeyPoint.pos:type_name -> base_types.VectorFloat2
	17, // 18: base_types.OrbFeaturePoint.key_point:type_name -> base_types.KeyPoint
	18, // 19: base_types.FeaturePoint.orb:type_name -> base_types.OrbFeaturePoint
	16, // 20: base_types.DataFrame.ar_session_frame:type_name -> base_types.ARSessionFrame
	4,  // 21: base_types.DataFrame.camera_transform:type_name -> base_types.Matrix4x4
	9,  // 22: base_types.DataFrame.gps:type_name -> base_types.GpsCoordinates
	18, // 23: base_types.DataFrame.orb_feature_points:type_name -> base_types.OrbFeaturePoint
	11, // 24: base_types.Plane.vertices:type_name -> base_types.VectorFloat3
	12, // 25: base_types.Plane.texture_coordinates:type_name -> base_types.VectorFloat2
	11, // 26: base_types.Plane.boundary_vertices:type_name -> base_types.VectorFloat3
	7,  // 27: base_types.Plane.anchor:type_name -> base_types.Anchor
	12, // 28: base_types.Plane.android_vertices:type_name -> base_types.VectorFloat2
	12, // 29: base_types.Plane.android_extent_xz:type_name -> base_types.VectorFloat2
	7,  // 30: base_types.Plane.anchors:type_name -> base_types.Anchor
	22, // 31: base_types.Plane.android_pose:type_name -> base_types.AndroidPose
	11, // 32: base_types.AndroidPose.android_translation:type_name -> base_types.VectorFloat3
	10, // 33: base_types.AndroidPose.android_quaternion:type_name -> base_types.VectorFloat4
	33, // 34: base_types.Photo.thumbnails:type_name -> base_types.Photo.ThumbnailsEntry
	34, // 35: base_types.Video.thumbnails:type_name -> base_types.Video.ThumbnailsEntry
	35, // 36: base_types.HeathCheckReply.results:type_name -> base_types.HeathCheckReply.ResultsEntry
	36, // 37: base_types.HeathCheckReply.result_details:type_name -> base_types.HeathCheckReply.ResultDetailsEntry
	9,  // 38: base_types.BoundingBox.min_point:type_name -> base_types.GpsCoordinates
	9,  // 39: base_types.BoundingBox.max_point:type_name -> base_types.GpsCoordinates
	4,  // 40: base_types.Position.transform:type_name -> base_types.Matrix4x4
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_base_types_proto_init() }
func file_base_types_proto_init() {
	if File_base_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matrix4X4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matrix3X3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetForDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFloat4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFloat3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFloat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RgbColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ARSessionFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrbFeaturePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model3D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeathCheckReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_base_types_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*FeaturePoint_Orb)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_types_proto_goTypes,
		DependencyIndexes: file_base_types_proto_depIdxs,
		MessageInfos:      file_base_types_proto_msgTypes,
	}.Build()
	File_base_types_proto = out.File
	file_base_types_proto_rawDesc = nil
	file_base_types_proto_goTypes = nil
	file_base_types_proto_depIdxs = nil
}
