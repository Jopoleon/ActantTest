// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: session.proto

package server

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: REMOVE deprecated
	ResultArSession         *ARSessionFrame `protobuf:"bytes,1,opt,name=result_ar_session,json=resultArSession,proto3" json:"result_ar_session,omitempty"`
	VideoStartTimestamp     float64         `protobuf:"fixed64,2,opt,name=video_start_timestamp,json=videoStartTimestamp,proto3" json:"video_start_timestamp,omitempty"`        // head
	SessionStartTimestamp   float64         `protobuf:"fixed64,13,opt,name=session_start_timestamp,json=sessionStartTimestamp,proto3" json:"session_start_timestamp,omitempty"` //head
	IntrinsicMatrix         *Matrix3X3      `protobuf:"bytes,3,opt,name=intrinsic_matrix,json=intrinsicMatrix,proto3" json:"intrinsic_matrix,omitempty"`                        // head
	MotionFps               uint32          `protobuf:"varint,4,opt,name=motion_fps,json=motionFps,proto3" json:"motion_fps,omitempty"`                                         // head
	UserId                  uint64          `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId               string          `protobuf:"bytes,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DeviceModel             string          `protobuf:"bytes,14,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"` // head
	DeviceOs                string          `protobuf:"bytes,15,opt,name=device_os,json=deviceOs,proto3" json:"device_os,omitempty"`          // head
	IsDetailFeaturesSession bool            `protobuf:"varint,16,opt,name=is_detail_features_session,json=isDetailFeaturesSession,proto3" json:"is_detail_features_session,omitempty"`
	OrbFrameWidth           uint32          `protobuf:"varint,18,opt,name=orb_frame_width,json=orbFrameWidth,proto3" json:"orb_frame_width,omitempty"`
	OrbFrameHeight          uint32          `protobuf:"varint,19,opt,name=orb_frame_height,json=orbFrameHeight,proto3" json:"orb_frame_height,omitempty"`
	ArFrameWidth            uint32          `protobuf:"varint,20,opt,name=ar_frame_width,json=arFrameWidth,proto3" json:"ar_frame_width,omitempty"`
	ArFrameHeight           uint32          `protobuf:"varint,21,opt,name=ar_frame_height,json=arFrameHeight,proto3" json:"ar_frame_height,omitempty"`
	// for extra data like app build version etc
	// {"app_version": "dev bulid 65", ... }
	ExtraData      map[string]string `protobuf:"bytes,17,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataFrames     []*DataFrame      `protobuf:"bytes,5,rep,name=data_frames,json=dataFrames,proto3" json:"data_frames,omitempty"`             // ~60 times in 1 second (video FPS rate)
	Planes         []*Plane          `protobuf:"bytes,6,rep,name=planes,proto3" json:"planes,omitempty"`                                       // ~ <= 60 times in 1 second (~ 1FPS in general)
	DetectedAssets []*DetectedAsset  `protobuf:"bytes,7,rep,name=detected_assets,json=detectedAssets,proto3" json:"detected_assets,omitempty"` // ~ <= 60 times in 1 second (~0.5 FPS in general)
	MotionFrames   []*MotionFrame    `protobuf:"bytes,8,rep,name=motion_frames,json=motionFrames,proto3" json:"motion_frames,omitempty"`       // ~ 60-200 times in 1 second
	LoadWorld      []*LoadWorldReply `protobuf:"bytes,9,rep,name=load_world,json=loadWorld,proto3" json:"load_world,omitempty"`                // ocasionally (when client read this data)
	HwFrames       []*HardwareFrame  `protobuf:"bytes,12,rep,name=hw_frames,json=hwFrames,proto3" json:"hw_frames,omitempty"`                  // ~ 1 time in 1 second
}

func (x *SessionData) Reset() {
	*x = SessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionData) ProtoMessage() {}

func (x *SessionData) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionData.ProtoReflect.Descriptor instead.
func (*SessionData) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{0}
}

func (x *SessionData) GetResultArSession() *ARSessionFrame {
	if x != nil {
		return x.ResultArSession
	}
	return nil
}

func (x *SessionData) GetVideoStartTimestamp() float64 {
	if x != nil {
		return x.VideoStartTimestamp
	}
	return 0
}

func (x *SessionData) GetSessionStartTimestamp() float64 {
	if x != nil {
		return x.SessionStartTimestamp
	}
	return 0
}

func (x *SessionData) GetIntrinsicMatrix() *Matrix3X3 {
	if x != nil {
		return x.IntrinsicMatrix
	}
	return nil
}

func (x *SessionData) GetMotionFps() uint32 {
	if x != nil {
		return x.MotionFps
	}
	return 0
}

func (x *SessionData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionData) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionData) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *SessionData) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *SessionData) GetIsDetailFeaturesSession() bool {
	if x != nil {
		return x.IsDetailFeaturesSession
	}
	return false
}

func (x *SessionData) GetOrbFrameWidth() uint32 {
	if x != nil {
		return x.OrbFrameWidth
	}
	return 0
}

func (x *SessionData) GetOrbFrameHeight() uint32 {
	if x != nil {
		return x.OrbFrameHeight
	}
	return 0
}

func (x *SessionData) GetArFrameWidth() uint32 {
	if x != nil {
		return x.ArFrameWidth
	}
	return 0
}

func (x *SessionData) GetArFrameHeight() uint32 {
	if x != nil {
		return x.ArFrameHeight
	}
	return 0
}

func (x *SessionData) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *SessionData) GetDataFrames() []*DataFrame {
	if x != nil {
		return x.DataFrames
	}
	return nil
}

func (x *SessionData) GetPlanes() []*Plane {
	if x != nil {
		return x.Planes
	}
	return nil
}

func (x *SessionData) GetDetectedAssets() []*DetectedAsset {
	if x != nil {
		return x.DetectedAssets
	}
	return nil
}

func (x *SessionData) GetMotionFrames() []*MotionFrame {
	if x != nil {
		return x.MotionFrames
	}
	return nil
}

func (x *SessionData) GetLoadWorld() []*LoadWorldReply {
	if x != nil {
		return x.LoadWorld
	}
	return nil
}

func (x *SessionData) GetHwFrames() []*HardwareFrame {
	if x != nil {
		return x.HwFrames
	}
	return nil
}

var File_session_proto protoreflect.FileDescriptor

var file_session_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x08, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x52, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x78, 0x33, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x62, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x62, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x62,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x62, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x72, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0d,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x12, 0x36, 0x0a, 0x09, 0x68, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x68, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_session_proto_rawDescOnce sync.Once
	file_session_proto_rawDescData = file_session_proto_rawDesc
)

func file_session_proto_rawDescGZIP() []byte {
	file_session_proto_rawDescOnce.Do(func() {
		file_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_session_proto_rawDescData)
	})
	return file_session_proto_rawDescData
}

var file_session_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_session_proto_goTypes = []interface{}{
	(*SessionData)(nil),    // 0: session.SessionData
	nil,                    // 1: session.SessionData.ExtraDataEntry
	(*ARSessionFrame)(nil), // 2: base_types.ARSessionFrame
	(*Matrix3X3)(nil),      // 3: base_types.Matrix3x3
	(*DataFrame)(nil),      // 4: base_types.DataFrame
	(*Plane)(nil),          // 5: base_types.Plane
	(*DetectedAsset)(nil),  // 6: base_types.DetectedAsset
	(*MotionFrame)(nil),    // 7: base_types.MotionFrame
	(*LoadWorldReply)(nil), // 8: proxy.LoadWorldReply
	(*HardwareFrame)(nil),  // 9: base_types.HardwareFrame
}
var file_session_proto_depIdxs = []int32{
	2, // 0: session.SessionData.result_ar_session:type_name -> base_types.ARSessionFrame
	3, // 1: session.SessionData.intrinsic_matrix:type_name -> base_types.Matrix3x3
	1, // 2: session.SessionData.extra_data:type_name -> session.SessionData.ExtraDataEntry
	4, // 3: session.SessionData.data_frames:type_name -> base_types.DataFrame
	5, // 4: session.SessionData.planes:type_name -> base_types.Plane
	6, // 5: session.SessionData.detected_assets:type_name -> base_types.DetectedAsset
	7, // 6: session.SessionData.motion_frames:type_name -> base_types.MotionFrame
	8, // 7: session.SessionData.load_world:type_name -> proxy.LoadWorldReply
	9, // 8: session.SessionData.hw_frames:type_name -> base_types.HardwareFrame
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_session_proto_init() }
func file_session_proto_init() {
	if File_session_proto != nil {
		return
	}
	file_base_types_proto_init()
	file_proxy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_session_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_session_proto_goTypes,
		DependencyIndexes: file_session_proto_depIdxs,
		MessageInfos:      file_session_proto_msgTypes,
	}.Build()
	File_session_proto = out.File
	file_session_proto_rawDesc = nil
	file_session_proto_goTypes = nil
	file_session_proto_depIdxs = nil
}
